#####################
##### FIRST RUN #####
#####################
#
firstrun ()
{
echo "Generating gpg key-pair. Please answer the questions."
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --gen-key
chown -R "$USER" gpg-KeyRNG/
chown -R "$USER" gpg-KeyRNG/*
chmod -R 0600 gpg-KeyRNG/gpg.conf
}
#
######################################
##### LOCK AND UNLOCK GPG-KEYRNG #####
######################################
#
#-----------
## LOCKUP ##
#-----------
lockup ()
{
tar -c *-KeyRNG libkeyrng > lock.KeyRNG.tar.gz
gpg --symmetric --cipher-algo aes256 lock.KeyRNG.tar.gz
echo "Shredding temp files..."
find *-KeyRNG -depth -type f -exec shred -n 1 -u {} \;
shred -zn 3 -u lock.KeyRNG.tar.gz libkeyrng
rm -rf *-KeyRNG *.tar.gz libkeyrng
exit 0
}
#----------
## ULOCK ##
#----------
unlock ()
{
gpg2 -d lock.KeyRNG.tar.gz.gpg > lock.KeyRNG.tar.gz
tar -xf lock.KeyRNG.tar.gz
echo "Shredding temp files..."
shred -zn 3 -u lock.KeyRNG.tar*
}
#
##########################
##### KEY MANAGEMENT #####
##########################
#
#---------------------
## GENERATE NEW KEY ##
#---------------------
genkey ()
{
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --gen-key
}
#--------------------------
## LIST FULL KEY DETAILS ##
#--------------------------
listfullkeydetails ()
{
echo "Press enter to see a list of possible recipients by UID."
echo "Use up/down arrows to navigate. Press "q" when your finished."
gpg2 --quiet --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | less
}
#------------------
## LIST KEY UIDS ##
#------------------
listkeyuids ()
{
echo "Press enter to see a list of possible recipients by UID."
echo "Use up/down arrows to navigate. Press "q" when your finished."
read
gpg2 --quiet --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
}
#---------------------------------
## LIST FULL SECRET KEY DETAILS ##
#---------------------------------
listfullseckey ()
{
echo "Press enter to see a list of possible recipients by UID."
echo "Use up/down arrows to navigate. Press "q" when your finished."
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-secret-keys | less
}
#-------------------------
## LIST SECRET KEY UIDS ##
#-------------------------
listseckeyuid ()
{
echo "Press enter to see a list of possible recipients by UID."
echo "Use up/down arrows to navigate. Press "q" when your finished."
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-secret-keys | grep "uid" | cut -b 21- | less
}
#-------------------------
## IMPORT KEY FROM FILE ##
#-------------------------
importkeyfile ()
{
echo "What file to import to KeyRNG?"
read $IMPORT_KEYFILE
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --import "$IMPORT_KEYFILE"
}
#------------------------------
## IMPORT KEY FROM CLIPBOARD ##
#------------------------------
importkeyclip ()
{
echo "Press enter when you are ready to paste your key."
read
rm -rf /tmp/import
nano /tmp/import
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --import /tmp/import
echo "Shredding temp file..."
shred -zn 3 /tmp/import
}
#--------------------------------
## IMPORT KEY FROM ANOTHER GPG ##
#--------------------------------
importkeyfromgpg ()
{
echo "From defualt /home/"$USER"/.gnupg file? (y/no)"
read IS_DEFAULT_GPG
  if [[ "$DEFAULT_GPG" = "no" ]]; then
      echo "Please give the full path to the gnupg file:"
      read DEFAULT_GPG
  else
      DEFAULT_GPG=/home/"$USER"/.gnupg/
  fi
echo "List keys from $"DEFAULT_GPG"? (y/no)"
read LIST_KEYS
  if [ "$LIST_KEYS" != "no" ]; then
      echo "Press enter to see a list of possible recipients by UID."
      echo "Use up/down arrows to navigate. Press "q" when your finished."
      read
      gpg2 --homedir "$DEFAULT_GPG" --list-keys | less
  fi
echo "What key UID do you want to import to KeyRNG?"
read IMPORT_KEY
gpg2 --homedir "$DEFAULT_GPG" --export "$IMPORT_KEY" | gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --import -
}
#----------------------
## EXPORT PUBLIC KEY ##
#----------------------
exportpubkey ()
{
echo "Press enter to see a list of your public keys. Press "q" when finished."
read
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
echo "Enter the UID you would like to export."
read EXPORT_UID
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --export "$EXPORT_UID"
}
#------------------------------
## EXPORT PUBLIC KEY TO FILE ##
#------------------------------
exportpubkeyfile ()
{
echo "Press enter to see a list of your public keys. Press "q" when finished."
read
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
echo "Enter the UID you would like to export."
read EXPORT_UID
echo "What file to write to?"
read PUBKEY_FILE
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --output "$PUBKEY_FILE" --export "$EXPORT_UID"
}
#----------------------
## EXPORT SECRET KEY ##
#----------------------
exportseckey ()
{
echo "Press enter to see a list of your secret keys. Press "q" when finished."
read
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-secret-keys | grep "uid" | cut -b 21- | less
echo "Enter the UID you would like to export."
read EXPORT_SECRET_UID
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --export "$EXPORT_SECRET_UID"
}
#------------------------------
## EXPORT SECRET KEY TO FILE ##
#------------------------------
exportseckeyfile ()
{
echo "Press enter to see a list of your public keys. Press "q" when finished."
read
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-secret-keys | grep "uid" | cut -b 21- | less
echo "Enter the UID you would like to export."
read EXPORT_SECRET_UID
echo "What file to write to?"
read SECKEY_FILE
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --output "$SECKEY_FILE" --export "$EXPORT_SECRET_UID"
}
#---------------------------
## SEND KEYS TO KEYSERVER ##
#---------------------------
sendkeyserv ()
{
echo "Press enter to see a list of your public keys. Copy the 0xlong key id, and press "q" when finished."
read
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | less
echo "Enter the UID you would like to send to the keyserver."
read SEND_KEYSERV_UID
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --send-keys "$SEND_KEYSERV_UID"
}
#-----------------------------
## RECEIVE KEYS FROM SERVER ##
#-----------------------------
#
recvkeyserv ()
{
echo "Please enter the UID you would like to receive from the keyserver."
read RECV_KEYSERV_UID
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --recv-keys "$RECV_KEYSERV_UID"
}
#####################################
##### ENCRYPTION AND DECRYPTION #####
#####################################
#
#-------------------
## ENCRYPT A FILE ##
#-------------------
encryptfile ()
{
echo "What file?"
read EFILE
echo "See UIDS of possible recipients? (y/no)"
read SHOW_UIDS
  if [ "$SHOW_UIDS" != "no" ]; then
      echo "Press enter to see a list of possible recipients by uid."
      echo "Use up/down arrows to navigate. Press "q" when your finished."
      read
      gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
  fi
echo "What recipient?"
read MSG_RECP
echo "Another recipient (yourself possibly)? (y/no)"
read IF_MSG_RECP_TWO
  if [[ "$IF_MSG_RECP_TWO" != "no" ]]; then
      echo "See UID list again? (y/no)"
      read SHOW_UIDS
        if [ "$SHOW_UIDS" != "no" ]; then
            echo "Press enter to see a list of possible recipients by uid."
            echo "Use up/down arrows to navigate. Press "q" when your finished."
            read
            gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
        fi
      echo "Second recipient?"
      read MSG_RECP_TWO
  fi
if [[ "$IF_MSG_RECP_TWO" = "no" ]]; then
    gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --recipient "$MSG_RECP" --output /tmp/newmsg.asc --encrypt "$EFILE"
else
    echo "Do you want the second recipient hidden? (y/no)"
    read HIDE_RECP_TWO
      if [ "$HIDE_RECP_TWO" != "no" ]; then
          gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --recipient "$MSG_RECP" --hidden-recipient "$MSG_RECP_TWO" --output /tmp/newmsg.asc --encrypt "$EFILE"
      fi
    gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --recipient "$MSG_RECP" --recipient "$MSG_RECP_TWO" --output /tmp/newmsg.asc --encrypt "$EFILE"
fi
echo "File is stored temporarily at /tmp/newmsg.asc."
echo "Would you like to print it now? (y/no)"
read CAT_EFILE
  if [ "$CAT_EFILE" != "no" ]; then
      cat /tmp/efile.asc
  fi
}
#--------------------------
## ENCRYPT A NEW MESSAGE ##
#--------------------------
encryptnewmsg ()
{
echo "Press enter to type message."
rm -rf /tmp/newmsg
nano /tmp/newmsg
echo "See UIDS of possible recipients? (y/no)"
read SHOW_UIDS
  if [ "$SHOW_UIDS" != "no" ]; then
      echo "Press enter to see a list of possible recipients by UID."
      echo "Use up/down arrows to navigate. Press "q" when your finished."
      read
      gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
  fi
echo "What recipient?"
read NEWMSG_RECP
echo "Another recipient (yourself possibly)? (y/no)"
read IF_NEWMSG_RECP_TWO
  if [ "$IF_NEWMSG_RECP_TWO" != "no" ]; then
      echo "See UID list again? (y/no)"
      read SHOW_UIDS
        if [ "$SHOW_UIDS" != "no" ]; then
            echo "Press enter to see a list of possible recipients by UID."
            echo "Use up/down arrows to navigate. Press "q" when your finished."
            read
            gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
        fi
      echo "Second recipient UID?"
      read NEWMSG_RECP_TWO
  fi
if [[ "$IF_NEWMSG_RECP_TWO" = "no" ]]; then
    gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --recipient "$NEWMSG_RECP" --output /tmp/newmsg.asc --encrypt /tmp/newmsg
else
    echo "Do you want the second recipient hidden? (y/no)"
    read HIDE_RECP_TWO
      if [ "$HIDE_RECP_TWO" != "no" ]; then
          gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --recipient "$NEWMSG_RECP" --hidden-recipient "$NEWMSG_RECP_TWO" --output /tmp/newmsg.asc --encrypt /tmp/newmsg
      fi
    gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --recipient "$NEWMSG_RECP" --recipient "$NEWMSG_RECP_TWO" --output /tmp/newmsg.asc --encrypt /tmp/newmsg
fi
echo "File is stored temporarily at /tmp/newmsg.asc. Would you like to print it now? (y/no)"
read CAT_EFILE
  if [ "$CAT_EFILE" != "no" ]; then
      cat /tmp/newmsg.asc
  fi
echo "Would you like to destroy the original, unencrypted message? (y/no)"
read DESTROY
  if [ "$DESTROY" != "no" ]; then
      echo "Shredding temp file..."
      shred -zn 3 /tmp/newmsg
  fi
}
#-----------------
## DECRYPT FILE ##
#-----------------
decryptfile ()
{
echo "Which file?"
read DFILE
echo "Is this encrypted to a hidden UID? (y/no)"
read IS_HIDDEN_UID
  if [[ "$IS_HIDDEN_UID" != "no" ]]; then
      echo "Do you know the UID it is encrypted to? (y/no)"
      read KNOW_UID
        if [[ "$KNOW_UID" = "no" ]]; then
            rm -rf /tmp/newmsg
            gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --try-all-secrets --output /tmp/newmsg --decrypt "$DFILE"
            echo "File is stored temporarily at /tmp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when your finished."
                  read
                  cat /tmp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        shred -zn 3 /tmp/newmsg
                    fi
              fi
        else
            echo "What UID?"
            read HIDDEN_UID
            gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --local-user "$HIDDEN_ID" --output /tmp/newmsg --decrypt "$DFILE"
            echo "File is stored temporarily at /tmp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when your finished."
                  read
                  cat /tmp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        shred -zn 3 /tmp/newmsg
                    fi
              fi
        fi
  else
      gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --local-user "$HIDDEN_ID" --output /tmp/newmsg --decrypt "$DFILE"   
      echo "File is stored temporarily at /tmp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when your finished."
                  read
                  cat /tmp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        shred -zn 3 /tmp/newmsg
                    fi
              fi 
  fi
}
#---------------------------
## DECRYPT FROM CLIPBOARD ##
#---------------------------
decryptclip ()
{
echo "Press enter when you are ready to paste the message."
read
rm -rf /tmp/newmsg
nano /tmp/newmsg
DFILE=/tmp/newmsg
echo "Is this encrypted to a hidden UID? (y/no)"
read IS_HIDDEN_UID
  if [[ "$IS_HIDDEN_UID" != "no" ]]; then
      echo "Do you know the UID it is encrypted to? (y/no)"
      read KNOW_UID
        if [[ "$KNOW_UID" = "no" ]]; then
            rm -rf /tmp/newmsg
            gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --try-all-secrets --output /tmp/newmsg --decrypt "$DFILE"
            echo "File is stored temporarily at /tmp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when your finished."
                  read
                  cat /tmp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        shred -zn 3 /tmp/newmsg
                    fi
              fi
        else
            echo "What UID?"
            read HIDDEN_UID
            gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --local-user "$HIDDEN_ID" --output /tmp/newmsg --decrypt "$DFILE"
            echo "File is stored temporarily at /tmp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when your finished."
                  read
                  cat /tmp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        shred -zn 3 /tmp/newmsg
                    fi
              fi
        fi
  else
      gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --local-user "$HIDDEN_ID" --output /tmp/newmsg --decrypt "$DFILE"   
      echo "File is stored temporarily at /tmp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when your finished."
                  read
                  cat /tmp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        shred -zn 3 /tmp/newmsg
                    fi
              fi 
  fi
}
#
##
#
