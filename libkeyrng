##### CENTER MENUS #####
#
echo_c()
{
w=$(stty size | cut -d" " -f2)
l=${#1}
printf "%"$((l+(w-l)/2))"s\n" "$1"
}
#
##### FIRST RUN #####
#
#
firstrun ()
{
REDO=$(gpg --homedir gpg-KeyRNG/ --list-keys | grep -c KeyRNG)
if [ "$REDO" -gt "0" ]; then gpg --homedir gpg-KeyRNG/ --delete-secret-keys KeyRNG && gpg --homedir gpg-KeyRNG/ --delete-keys KeyRNG
fi
echo ""
echo_c "GENERATING GPG MASTER KEY!."
echo_c "This key will be used to encrypt your bitcoin private keys and seeds."
echo ""
echo ""
read -s -p "Create a strong passphrase for this key: " PW
echo ""
read -s -p "Repeat: " CPW
while [[ "$PW" != "$CPW" ]]; do echo "Passwords don't match."; echo ""
read -s -p "Create a strong passphrase for this key: " PW
echo ""
read -s -p "Repeat: " CPW
done
echo -e "\nGenerating key..."
echo -e "Key-Type: 1\nKey-Length: 4096\nSubkey-Type: 1\nSubkey-Length: 4096\nPassphrase: "$PW"\nName-Real: KeyRNG\nExpire-Date: 0\nCreation-Date:1984-01-01\n" | gpg --homedir gpg-KeyRNG/ --quiet --batch --gen-key
unset PW; unset CPW
chown -R "$USER" gpg-KeyRNG/
chown -R "$USER" gpg-KeyRNG/*
chmod -R 0600 gpg-KeyRNG/gpg.conf
}
###################
##### QUITING #####
###################
badquit ()
{
clear
echo -e "\nI suggest quitting by using the "FAST LOCK UP" or "SECURE LOCK UP" option on any menu."
read -p "Do you still want to quit now? (Y/no) " RLYQUIT
if [[ "$RLYQUIT" = "Y" ]]; then
    exit 0
else
    break
fi
}
#########################
##### SECURE-DELETE #####
#########################
#
secdelete ()
{
HAS_SRM=$(ls /usr/bin/ /usr/sbin/ /usr/local/bin/ | grep -c srm)
if [[ "$HAS_SRM" -gt "0" ]]; then
    srm -d -r "$DEL"
else
    shred -u -z "$DEL"
fi
}
#
###########################
##### LOCK AND UNLOCK #####
###########################
#
#-----------
## LOCKUP ##
#-----------
lockup ()
{
read -s -p "Enter Password: " PW
PW=$(echo -n "$PW" | shasum -t -a 512 | cut -b -128)
echo ""
read -s -p "Once more:" CHKPW
CHKPW=$(echo -n "$CHKPW" | shasum -t -a 512 | cut -b -128)
if [[ "$PW" = "$CHKPW" ]]; then
    rm -rf checksum
    touch checksum
    chmod 0600 checksum
    cat keyrng | shasum -t -a 512 | cut -b -128 > checksum
    tar -cf KeyRNG.tar.gz gpg-KeyRNG/ btc-KeyRNG/ pybtctools/ libkeyrng
    gpg --quiet --output KeyRNG.gpg --passphrase "$PW"  --cipher-algo aes256 --symmetric KeyRNG.tar.gz
    gpg --quiet --passphrase "$PW"  --cipher-algo aes256 --symmetric checksum
    unset PW; unset CHKPW;
    echo "Cleaning temp files..."
    HAS_SRM=$(ls /usr/bin/ /usr/sbin/ /usr/local/bin/ /home/"$USER"/bin/ | grep -c srm)
    if [[ "$HAS_SRM" -gt "0" ]]; then
        srm -drv btc-KeyRNG/*.seed btc-KeyRNG/*.addr temp/ checksum *-KeyRNG/ *.tar.gz
        rm -rf libkeyrng pybtctools
    else
        find btc-KeyRNG/ -depth -type f -exec shred -u -z {}
        find *-KeyRNG -depth -type f -exec shred -u -z {}
        find temp/ -depth -type f -exec shred -u -z {}
        shred -vuz *.tar.gz checksum
        rm -rf temp/ *-KeyRNG/ libkeyrng pybtctools/
    fi
    exit 0
else
    echo -e "\nPASSWORDS DIDN'T MATCH! NOT ENCRYPTING!"
    break
fi
}
#-----------------
## FAST LOCKUP  ##
#-----------------
fastlockup ()
{
read -s -p "Enter Password: " PW
PW=$(echo -n "$PW" | shasum -t -a 512 | cut -b -128)
echo ""
read -s -p "Once more:" CHKPW
CHKPW=$(echo -n "$CHKPW" | shasum -t -a 512 | cut -b -128)
if [[ "$PW" = "$CHKPW" ]]; then
    rm -rf checksum
    touch checksum
    chmod 0600 checksum
    cat keyrng | shasum -t -a 512 | cut -b -128 > checksum
    tar -cf KeyRNG.tar.gz btc-KeyRNG/ gpg-KeyRNG/ pybtctools/ libkeyrng
    gpg --output KeyRNG.gpg --quiet --passphrase "$PW"  --cipher-algo aes256 --symmetric KeyRNG.tar.gz
    gpg --quiet --passphrase "$PW"  --cipher-algo aes256 --symmetric checksum
    unset PW; unset CHKPW
    rm -rf *-KeyRNG/ pybtctools/ libkeyrng *.tar.gz temp/ checksum
    exit 0
else
    unset PW; unset CHKPW
    echo -e "\nPASSWORDS DIDN'T MATCH! NOT ENCRYPTING!"
    break
fi
}
#
##########################
##### KEY MANAGEMENT #####
##########################
#
#---------------------
## GENERATE NEW KEY ##
#---------------------
genkey ()
{
gpg --homedir gpg-KeyRNG/  --gen-key
}
#--------------------------
## LIST FULL KEY DETAILS ##
#--------------------------
listfullkeydetails ()
{
echo "Press enter to see a list of possible recipients by UID."
echo "Use up/down arrows to navigate. Press "q" when your finished."
gpg --quiet --homedir gpg-KeyRNG/  --list-keys | grep -e "uid" -e "fingerprint" -e "0x" | sed -e 's|              ||g' | less
}
#------------------
## LIST KEY UIDS ##
#------------------
listkeyuids ()
{
echo "Press enter to see a list of possible recipients by UID."
echo "Use up/down arrows to navigate. Press "q" when your finished."
read
gpg --quiet --homedir gpg-KeyRNG/  --list-keys | grep "uid" | cut -b 21- | less
}
#---------------------------------
## LIST FULL SECRET KEY DETAILS ##
#---------------------------------
listfullseckey ()
{
echo "Press enter to see a list of possible recipients by UID."
echo "Use up/down arrows to navigate. Press "q" when your finished."
gpg --homedir gpg-KeyRNG/  --list-secret-keys | grep -e "uid" -e "fingerprint" -e "0x" | sed -e 's|                         ||g' | less
}
#-------------------------
## LIST SECRET KEY UIDS ##
#-------------------------
listseckeyuid ()
{
echo "Press enter to see a list of possible recipients by UID."
echo "Use up/down arrows to navigate. Press "q" when your finished."
gpg --homedir gpg-KeyRNG/  --list-secret-keys | grep "uid" | cut -b 21- | less
}
#-------------------------
## IMPORT KEY FROM FILE ##
#-------------------------
importkeyfile ()
{
echo "What file to import to KeyRNG?"
read $IMPORT_KEYFILE
gpg --homedir gpg-KeyRNG/  --import "$IMPORT_KEYFILE"
gpg --homedir gpg-KeyRNG/  --list-keys "$IMPORT_KEYFILE" | grep "fingerprint" | cut -b 25- | tr -d " " | sed 's|$|\:6\:|' | gpg --homedir gpg-KeyRNG/ --no-permission-warning --quiet --import-owner-trust
}
#------------------------------
## IMPORT KEY FROM CLIPBOARD ##
#------------------------------
importkeyclip ()
{
echo "Press enter when you are ready to paste key to import."
read
rm -rf temp/temp
nano temp/temp
gpg --homedir gpg-KeyRNG/  --import temp/temp
gpg --homedir gpg-KeyRNG/  --list-keys $(cat temp/temp) | grep "fingerprint" | cut -b 25- | tr -d " " | sed 's|$|\:6\:|' | gpg --homedir gpg-KeyRNG/ --no-permission-warning --quiet --import-owner-trust
echo "Shredding temp file..."
DEL=temp/temp
secdelete
}
#--------------------------------
## IMPORT KEY FROM ANOTHER GPG ##
#--------------------------------
importkeyfromgpg ()
{
echo "From defualt /home/"$USER"/.gnupg file? (y/no)"
read IS_DEFAULT_GPG
  if [[ "$DEFAULT_GPG" = "no" ]]; then
      echo "Please give the full path to the gnupg file:"
      read DEFAULT_GPG
  else
      DEFAULT_GPG=/home/"$USER"/.gnupg/
  fi
echo "List keys from "$DEFAULT_GPG"? (y/no)"
read LIST_KEYS
  if [ "$LIST_KEYS" != "no" ]; then
      echo "Press enter to see a list of possible recipients by UID."
      echo "Use up/down arrows to navigate. Press "q" when finished."
      read
      gpg --homedir "$DEFAULT_GPG" --list-keys --keyid-format 0xlong | less
  fi
echo "What key UID do you want to import to KeyRNG?"
read IMPORT_KEY
gpg --homedir "$DEFAULT_GPG" --export "$IMPORT_KEY" | gpg --homedir gpg-KeyRNG/  --quiet --import -
gpg --homedir gpg-KeyRNG/  --list-keys "$IMPORT_KEY" | grep "fingerprint" | cut -b 25- | tr -d " " | sed 's|$|\:6\:|' | gpg --homedir gpg-KeyRNG/ --no-permission-warning --quiet --import-owner-trust
}
#--------------------------------------------
## IMPORT ALL PUBLIC KEYS FROM ANOTHER GPG ##
#--------------------------------------------
gpgimportallpub ()
{
echo "Import all public keys from default location (/home/"$USER"/.gnupg/)? (y/no)"
read DEFAULT
if [[ "$DEFAULT" != "no" ]]; then
    GPG=/home/"$USER"/.gnupg/
else
    echo "Give the path and folder name."
    read GPG
fi
rm -rf temp/temp
gpg --homedir $(echo "$GPG") --no-permission-warning --list-keys --keyid-format 0xlong | grep "0x" | cut -b 13- | cut -b -19 > temp/temp
LINES=$(grep -c "0x" temp/temp)
if [ "$LINES" -gt "0" ]; then
    cat temp/temp | xargs -I{} -d"\n" gpg --no-permission-warning --homedir $(echo "$GPG") --export {} | gpg --no-permission-warning --homedir gpg-KeyRNG/ --import
gpg --homedir gpg-KeyRNG/ --list-keys | grep "fingerprint" | cut -b 25- | tr -d " " | sed 's|$|\:6\:|' | gpg --homedir gpg-KeyRNG/ --import-ownertrust
fi
echo "Shredding temp file..."
DEL=temp/temp
secdelete
}
#---------------------------------------
## IMPORT SECRET KEY FROM ANOTHER GPG ##
#---------------------------------------
importseckeyfromgpg ()
{
echo "From defualt /home/"$USER"/.gnupg file? (y/no)"
read IS_DEFAULT_GPG
  if [[ "$IS_DEFAULT_GPG" = "no" ]]; then
      echo "Please give the full path to the gnupg file:"
      read GPG
  else
      GPG=/home/"$USER"/.gnupg/
  fi
echo "List keys from "$DEFAULT_GPG"? (y/no)"
read LIST_KEYS
  if [ "$LIST_KEYS" != "no" ]; then
      echo "Press enter to see a list of possible recipients by UID."
      echo "Use up/down arrows to navigate. Press "q" when finished."
      read
      gpg --homedir "$GPG" --list-secret-keys --keyid-format 0xlong | less
  fi
echo "What key UID do you want to import to KeyRNG?"
read IMPORT_KEY
gpg --quiet --no-permission-warning --homedir "$GPG" --export "$IMPORT_KEY" | gpg --homedir gpg-KeyRNG/  --import
}
#---------------------------------------------
## IMPORT ALL PRIVATE KEYS FROM ANOTHER GPG ##
#---------------------------------------------
gpgimportallsec ()
{
echo "Import all secret keys from default location (/home/"$USER"/.gnupg/)? (y/no)"
read DEFAULT
if [[ "$DEFAULT" != "no" ]]; then
    GPG=/home/"$USER"/.gnupg/
else
    echo "Give path to GnuPG folder to import all secret keys from."
    read GPG
fi
rm -rf temp/temp
gpg --quiet --homedir "$GPG" --no-permission-warning --list-secret-keys --keyid-format 0xlong | grep "0x" | cut -b 13- | cut -b -19 > temp/temp
LINES=$(grep -c "0x" temp/temp)
if [ "$LINES" -gt "0" ]; then
    cat temp/temp | xargs -I{} -d"\n" gpg  --homedir "$GPG" --export-secret-keys {} | gpg --no-permission-warning --homedir gpg-KeyRNG/ --import
fi
echo "Shredding temp file..."
DEL=temp/temp
secdelete
}
#----------------------
## EXPORT PUBLIC KEY ##
#----------------------
exportpubkey ()
{
echo "Press enter to see a list of your public keys. Press "q" when finished."
read
gpg --homedir gpg-KeyRNG/  --list-keys | grep "uid" | cut -b 21- | less
echo "Enter the UID you would like to export."
read EXPORT_UID
gpg --homedir gpg-KeyRNG/  --armor --export "$EXPORT_UID"
}
#------------------------------
## EXPORT PUBLIC KEY TO FILE ##
#------------------------------
exportpubkeyfile ()
{
echo "Press enter to see a list of your public keys. Press "q" when finished."
read
gpg --homedir gpg-KeyRNG/  --list-keys | grep "uid" | cut -b 21- | less
echo "Enter the UID you would like to export."
read EXPORT_UID
echo "What file to write to?"
read PUBKEY_FILE
gpg --homedir gpg-KeyRNG/  --armor --output "$PUBKEY_FILE" --export "$EXPORT_UID"
}
#----------------------
## EXPORT SECRET KEY ##
#----------------------
exportseckey ()
{
echo "Press enter to see a list of your secret keys. Press "q" when finished."
read
gpg --homedir gpg-KeyRNG/  --list-secret-keys | grep "uid" | cut -b 21- | less
echo "Enter the UID you would like to export."
read EXPORT_SECRET_UID
gpg --homedir gpg-KeyRNG/  --armor --export "$EXPORT_SECRET_UID"
}
#------------------------------
## EXPORT SECRET KEY TO FILE ##
#------------------------------
exportseckeyfile ()
{
echo "Press enter to see a list of your public keys. Press "q" when finished."
read
gpg --homedir gpg-KeyRNG/  --list-secret-keys | grep "uid" | cut -b 21- | less
echo "Enter the UID you would like to export."
read EXPORT_SECRET_UID
echo "What file to write to?"
read SECKEY_FILE
gpg --homedir gpg-KeyRNG/  --armor --output "$SECKEY_FILE" --export "$EXPORT_SECRET_UID"
}
#
## WRITE FUNC TO CHECK FOR TAILS/TOR ##
#

#---------------------------
## SEND KEYS TO KEYSERVER ##
#---------------------------
sendkeyserv ()
{
read -p "Send all keys? (Y/no) " ALL
if [[ "$ALL" = "Y" ]]; then
  gpg --homedir gpg-KeyRNG/ --list-keys | grep "0x" | cut -b 13- | cut -b -19 > temp/temp
  cat temp/temp | xargs -I{} -d"\n" gpg  --homedir gpg-KeyRNG --send-keys {}
  echo "Shredding temp file..."
  DEL=temp/temp; secdelete
else
  echo "Copy the key ID starting with "0x...", press "q" when finished."
  echo "Press enter to see a list of your public keys."
  read
  gpg --homedir gpg-KeyRNG/  --list-keys | less
  echo "Enter the UID you would like to send to the keyserver."
  read SEND_KEYSERV_UID
  gpg --homedir gpg-KeyRNG/  --send-keys "$SEND_KEYSERV_UID"
fi
}
#-----------------------------
## RECEIVE KEYS FROM SERVER ##
#-----------------------------
#
recvkeyserv ()
{
echo "Please enter the UID you would like to receive from the keyserver."
read RECV_KEYSERV_UID
gpg --homedir gpg-KeyRNG/  --recv-keys "$RECV_KEYSERV_UID"
gpg --homedir gpg-KeyRNG/  --list-keys "$RECV_KEYSERV_UID" | grep "fingerprint" | cut -b 25- | tr -d " " | sed 's|$|\:6\:|' | gpg --homedir gpg-KeyRNG/ --no-permission-warning --quiet --import-owner-trust
}
#---------------------------------------
## REFRESH KEYS/FIX OWNER PERMISSIONS ##
#---------------------------------------
refreshkeys (){
read -p "Refresh all keys? (y/no) " ALL
if [[ "$ALL" != "no" ]]; then 
  gpg --homedir gpg-KeyRNG/  --quiet --refresh-keys
  gpg --homedir gpg-KeyRNG/ --list-keys | grep "0x" | cut -b 13- | cut -b -19 > temp/temp
  LINES=$(grep -c "0x" temp/temp)
    if [ "$LINES" -gt "0" ]; then
      cat temp/temp | xargs -I{} -d"\n" gpg  --homedir gpg-KeyRNG --list-keys {} | grep "fingerprint" | cut -b 25- | tr -d " " | sed 's|$|\:6\:|' | gpg --homedir gpg-KeyRNG/ --no-permission-warning --quiet --import-owner-trust
      echo "Shredding temp file..."
      DEL=temp/temp; secdelete
    fi
else read -p "What key to refresh? " ID; gpg --homedir gpg-KeyRNG/  --quiet --refresh-keys "$ID"
fi; }

#####################################
##### ENCRYPTION AND DECRYPTION #####
#####################################
#
#-------------------
## ENCRYPT A FILE ##
#-------------------
encryptfile ()
{
echo "What file?"
read EFILE
echo "Sign message? (Y/no)"
read SIGN
if [ "$SIGN" = "Y" ]; then
    echo "See private keys to sign with? (y/no)"
    read SHOW_PRIV
    if [[ "$SHOW_PRIV" != "no" ]]; then
        echo "Copy the UID you would like to sign with."
        echo "Press enter to see a list of signing keys."
        echo "Use up/down arrows to navigate. Press "q" when your finished."
        read
        gpg --homedir gpg-KeyRNG/  --list-keys | grep "sig"
        echo "Paste UID to sign with:"
        read PRIVKEY
    else
        echo "Paste UID to sign with:"
        read PRIVKEY    
    fi
fi
echo "See UIDS of possible recipients? (y/no)"
read SHOW_UIDS
if [ "$SHOW_UIDS" != "no" ]; then
    echo "Press enter to see a list of possible recipients by uid."
    echo "Use up/down arrows to navigate. Press "q" when your finished."
    read
    gpg --homedir gpg-KeyRNG/  --list-keys | grep "uid" | cut -b 21- | less
fi
echo "What recipient?"
read MSG_RECP
echo "Another recipient (yourself possibly)? (y/no)"
read IF_MSG_RECP_TWO
  if [[ "$IF_MSG_RECP_TWO" != "no" ]]; then
      echo "See UID list again? (y/no)"
      read SHOW_UIDS
      if [ "$SHOW_UIDS" != "no" ]; then
          echo "Press enter to see a list of possible recipients by uid."
          echo "Use up/down arrows to navigate. Press "q" when your finished."
          read
          gpg --homedir gpg-KeyRNG/  --list-keys | grep "uid" | cut -b 21- | less
      fi
      echo "Second recipient?"
      read MSG_RECP_TWO
  fi
if [[ "$SIGN" != "Y" ]]; then
  if [[ "$IF_MSG_RECP_TWO" = "no" ]]; then
      gpg --homedir gpg-KeyRNG/  --armor --recipient "$MSG_RECP" --output temp/newmsg.asc --encrypt "$EFILE"
  else
      echo "Do you want the second recipient hidden? (y/no)"
      read HIDE_RECP_TWO
      if [ "$HIDE_RECP_TWO" != "no" ]; then
          gpg --homedir gpg-KeyRNG/  --armor --hidden-recipient "$MSG_RECP_TWO" --recipient "$MSG_RECP" --output temp/newmsg.asc --encrypt "$EFILE"
      fi
      gpg --homedir gpg-KeyRNG/  --armor --recipient "$MSG_RECP" --recipient "$MSG_RECP_TWO" --output temp/newmsg.asc --encrypt "$EFILE"
  fi
else
  if [[ "$IF_MSG_RECP_TWO" = "no" ]]; then
      gpg --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --sign  --armor --recipient "$MSG_RECP" --output temp/newmsg.asc --encrypt "$EFILE"
  else
      echo "Do you want the second recipient hidden? (y/no)"
      read HIDE_RECP_TWO
      if [ "$HIDE_RECP_TWO" != "no" ]; then
          gpg --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --sign  --armor --hidden-recipient "$MSG_RECP_TWO" --recipient "$MSG_RECP" --output temp/newmsg.asc --encrypt "$EFILE"
      fi
      gpg --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --sign  --armor --recipient "$MSG_RECP" --recipient "$MSG_RECP_TWO" --output temp/newmsg.asc --encrypt "$EFILE"
  fi
fi
echo "File is stored temporarily at KeyRNG/temp/newmsg.asc."
echo "Would you like to print it now? (y/no)"
read CAT_EFILE
  if [ "$CAT_EFILE" != "no" ]; then
      cat temp/newmsg.asc
      echo "Destroy now? (y/no)"
      read DESTROY
      if [ "$DESTROY" != "no" ]; then
          DEL=temp/newmsg.asc
          secdelete
      fi
  fi
}
#--------------------------
## ENCRYPT A NEW MESSAGE ##
#--------------------------
encryptnewmsg ()
{
echo "Press enter to type message."
rm -rf temp/newmsg
nano temp/newmsg
echo "Sign message? (Y/no)"
read SIGN
if [ "$SIGN" = "Y" ]; then
    echo "See private keys to sign with? (y/no)"
    read SHOW_PRIV
    if [[ "$SHOW_PRIV" != "no" ]]; then
        echo "Copy the UID you would like to sign with."
        echo "Press enter to see a list of signing keys."
        echo "Use up/down arrows to navigate. Press "q" when your finished."
        read
        gpg --homedir gpg-KeyRNG/  --list-keys | grep "sig"
        echo "Give UID to sign with:"
        read PRIVKEY
    else
        echo "Give UID to sign with:"
        read PRIVKEY    
    fi
fi
echo "See UIDS of possible recipients? (y/no)"
read SHOW_UIDS
  if [ "$SHOW_UIDS" != "no" ]; then
      echo "Press enter to see a list of possible recipients by UID."
      echo "Use up/down arrows to navigate. Press "q" when your finished."
      read
      gpg --homedir gpg-KeyRNG/  --list-keys | grep "uid" | cut -b 21- | less
  fi
echo "What recipient?"
read NEWMSG_RECP
echo "Another recipient (yourself possibly)? (y/no)"
read IF_NEWMSG_RECP_TWO
if [ "$IF_NEWMSG_RECP_TWO" != "no" ]; then
    echo "See UID list again? (y/no)"
    read SHOW_UIDS
    if [ "$SHOW_UIDS" != "no" ]; then
        echo "Press enter to see a list of possible recipients by UID."
        echo "Use up/down arrows to navigate. Press "q" when your finished."
        read
        gpg --homedir gpg-KeyRNG/ --list-keys | grep "uid" | cut -b 21- | less
    fi
    echo "Second recipient UID?"
    read NEWMSG_RECP_TWO
    echo "Do you want the second recipient hidden? (y/no)"
    read HIDE_RECP_TWO
    if [[ "$SIGN" != "Y" ]]; then
      if [[ "$HIDE_RECP_TWO" != "no" ]]; then
          gpg --homedir gpg-KeyRNG/ --armor --recipient "$NEWMSG_RECP" --hidden-recipient "$NEWMSG_RECP_TWO" --yes --output temp/newmsg.asc --encrypt temp/newmsg
      else
          gpg --homedir gpg-KeyRNG/ --armor --recipient "$NEWMSG_RECP" --recipient "$NEWMSG_RECP_TWO" --yes --output temp/newmsg.asc --encrypt temp/newmsg
      fi
    else
      if [[ "$HIDE_RECP_TWO" != "no" ]]; then
          gpg --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --sign  --armor --recipient "$NEWMSG_RECP" --hidden-recipient "$NEWMSG_RECP_TWO" --yes --output temp/newmsg.asc --encrypt temp/newmsg
      else
          gpg --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --sign  --armor --recipient "$NEWMSG_RECP" --recipient "$NEWMSG_RECP_TWO" --yes --output temp/newmsg.asc --encrypt temp/newmsg
      fi  
    fi
else
  if [[ "$SIGN" != "Y" ]]; then
      gpg --homedir gpg-KeyRNG/  --armor --recipient "$NEWMSG_RECP" --yes --output temp/newmsg.asc --encrypt temp/newmsg
  else
      gpg --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --sign  --armor --recipient "$NEWMSG_RECP" --yes --output temp/newmsg.asc --encrypt temp/newmsg
  fi
fi
echo "File is stored temporarily at KeyRNG/temp/newmsg.asc"
echo "Would you like to destroy the original, unencrypted message? (y/no)"
read DESTROY
  if [ "$DESTROY" != "no" ]; then
      echo "Shredding temp file..."
      DEL=temp/newmsg
      secdelete
  fi
echo "Would you like to print it now? (y/no)"
read CAT_EFILE
  if [ "$CAT_EFILE" != "no" ]; then
      cat temp/newmsg.asc
      echo "Destroy now? (y/no)"
      read DESTROY
      if [ "$DESTROY" != "no" ]; then
          DEL=temp/newmsg.asc
          secdelete
      fi
  fi
}
#-----------------
## DECRYPT FILE ##
#-----------------
decryptfile ()
{
echo "Which file?"
read DFILE
echo "Is this encrypted to a hidden UID? (y/no)"
read IS_HIDDEN_UID
  if [[ "$IS_HIDDEN_UID" != "no" ]]; then
      echo "Do you know the UID it is encrypted to? (y/no)"
      read KNOW_UID
        if [[ "$KNOW_UID" = "no" ]]; then
            echo "Press enter to try all secret keys."
            read
            rm -rf temp/newmsg
            gpg --homedir gpg-KeyRNG/  --try-all-secrets --output temp/newmsg --decrypt "$DFILE"
            echo "File is stored temporarily at KeyRNG/temp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when your finished."
                  read
                  cat temp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        DEL=temp/newmsg
                        secdelete
                    fi
              fi
        else
            echo "What UID?"
            read HIDDEN_UID
            gpg --homedir gpg-KeyRNG/  --local-user "$HIDDEN_ID" --output temp/newmsg --decrypt "$DFILE"
            echo "File is stored temporarily at KeyRNG/temp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when your finished."
                  read
                  cat temp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        DEL=temp/newmsg
                        secdelete
                    fi
              fi
        fi
  else
      gpg --homedir gpg-KeyRNG/  --local-user "$HIDDEN_ID" --output temp/newmsg --decrypt "$DFILE"   
      echo "File is stored temporarily at KeyRNG/temp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when finished."
                  read
                  cat temp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        DEL=temp/newmsg
                        secdelete
                    fi
              fi 
  fi
}
#---------------------------
## DECRYPT FROM CLIPBOARD ##
#---------------------------
decryptclip ()
{
echo "Press enter when you are ready to paste the message."
read
rm -rf temp/newmsg
nano temp/newmsg
DFILE=temp/newmsg
echo "Is this encrypted to a hidden UID? (y/no)"
read IS_HIDDEN_UID
  if [[ "$IS_HIDDEN_UID" != "no" ]]; then
      echo "Do you know the UID it is encrypted to? (y/no)"
      read KNOW_UID
        if [[ "$KNOW_UID" = "no" ]]; then
            echo "Press enter to try all secret keys."
            read
            rm -rf temp/newmsg
            gpg --homedir gpg-KeyRNG/  --try-all-secrets --output temp/newmsg --yes --decrypt "$DFILE"
            echo "File is stored temporarily at KeyRNG/temp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when finished."
                  read
                  cat temp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        DEL=temp/newmsg
                        secdelete
                    fi
              fi
        else
            echo "What UID?"
            read HIDDEN_UID
            gpg --homedir gpg-KeyRNG/  --local-user "$HIDDEN_ID" --yes --output temp/newmsg --decrypt "$DFILE"
            echo "File is stored temporarily at KeyRNG/temp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when finished."
                  read
                  cat temp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        DEL=temp/newmsg
                        secdelete
                    fi
              fi
        fi
  else
      gpg --homedir gpg-KeyRNG/  --local-user "$HIDDEN_ID" --output temp/newmsg --yes --decrypt "$DFILE"   
      echo "File is stored temporarily at KeyRNG/temp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when finished."
                  read
                  cat temp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        DEL=temp/newmsg
                        secdelete
                    fi
              fi 
  fi
}
#-----------------------------
## GPG CLEARSIGN FROM FILE ##
#-----------------------------
csignfile ()
{
echo "File to sign:"
read FILE
echo "See private keys to sign with? (y/no)"
read SEE
  if [ "$SEE" != "no" ]; then
      echo "Copy the UID you would like to sign with."
      echo "Press enter to see a list of possible recipients by uid."
      echo "Use up/down arrows to navigate. Press "q" when finished."
      read
      gpg --homedir gpg-KeyRNG/  --list-secret-keys | grep -e "uid" -e "fingerprint" -e "0x" | sed -e 's|                         ||g' | less
  fi
echo "Give UID to sign with:"
read PRIVKEY
gpg --homedir gpg-KeyRNG/ --local-user "$PRIVKEY"  --yes --armor --output "$FILE".asc --clearsign "$FILE"
echo "Signed file is stored at "$FILE".asc."
echo "Do you want to copy the file to another location? (Y/no)"
read COPY
if [ "$COPY" = "Y" ]; then
  echo "Path to copy to:"
  read CPATH
  cp "$FILE".asc "$CPATH"
fi
echo "Show the signed document here? (Y/no)"
read SHOW
  if [ "$SHOW" = "Y" ]; then
      cat "$FILE".asc
  fi
}
#------------------------------
## GPG CLEARSIGN NEW MESSAGE ##
#------------------------------
csignnew ()
{
echo "Press enter to type new message to clearsign."
read
rm -rf temp/newmsg
nano temp/newmsg
FILE=temp/newmsg
echo "See private keys to sign with? (y/no)"
read SEE
  if [ "$SEE" != "no" ]; then
      echo "Copy the UID you would like to sign with."
      echo "Press enter to see a list of possible recipients by uid."
      echo "Use up/down arrows to navigate. Press "q" when finished."
      read
      gpg --homedir gpg-KeyRNG/  --list-secret-keys | grep -e "uid" -e "fingerprint" -e "0x" | sed -e 's|                         ||g' | less
  fi
echo "Give UID to sign with:"
read PRIVKEY
gpg --homedir gpg-KeyRNG/ --local-user "$PRIVKEY"  --yes --armor --output "$FILE".asc --clearsign "$FILE"
echo "Signed file is stored at "$FILE".asc."
echo "This file will be deleted when you do the LOCK UP! option."
echo "Do you want to copy the file to another location? (Y/no)"
read COPY
if [ "$COPY" = "Y" ]; then
  echo "Path to copy to:"
  read CPATH
  cp "$FILE".asc "$CPATH"
fi
echo "Show the signed document here? (Y/no)"
read SHOW
  if [ "$SHOW" = "Y" ]; then
      cat "$FILE".asc
  fi
}
#------------------------------
## GPG VERIFY FILE SIGNATURE ##
#------------------------------
gpgfileverify ()
{
echo "Which file to verify?"
read FILE
gpg --homedir gpg-KeyRNG/  --verify "$FILE"
}
#------------------------------------
## GPG VERIFY CLIPBOARD SIGNATURE  ##
#------------------------------------
gpgclipverify ()
{
echo "Press enter to paste GPG clearsigned message."
read
rm -rf temp/newmsg
nano temp/newmsg
FILE=temp/newmsg
gpg --homedir gpg-KeyRNG/  --verify "$FILE"
}
#################################
##### GENERAL BTC FUNCTIONS #####
#################################
#--------------------------------------------------------------------------------
## BITCOIN SIGN MESSAGE ## ONLY WORKS FOR SIGNING ONE LINE MESSAGES CURRENTLY. ##
#--------------------------------------------------------------------------------
btcsign ()
{
echo "This isn't working too well yet."
echo "Once you hit enter your message is finished. So, yeah..."
echo "Type the message you would like to sign."
echo "Press enter when finished."
read MSG
echo "See a list of your addresses and private keys to sign with? (y/no)"
read SEE
if [ "$SEE" != "no" ]; then
    echo "Press enter to see addresses and private keys."
    echo "Please copy the private key you would like to sign with."
    echo "Use up/down arrows to navigate. Press "q" when finished."
    read
    cat btc-KeyRNG/*.addr | grep ":" | less
fi
echo "Paste privkey"
read PRIVKEY
SIG=$(pybtctools/pybtctool ecdsa_sign "$MSG" "$PRIVKEY")
echo -e "-----BEGIN BITCOIN SIGNED MESSAGE-----\n" > temp/btcmsg
echo -n ""$MSG"\n" >> temp/btcmsg
echo -e "\n-----BEGIN BITCOIN SIGNATURE-----\n" >> temp/btcmsg
echo -n "$SIG" >> temp/btcmsg
echo -e "\n\n-----END BITCOIN SIGNATURE-----" >> temp/btcmsg
echo "\nMessage and signature are temporarily save at KeyRNG/temp/btcmsg."
echo "Press enter to see signed message."
read
cat temp/btcmsg
echo "Destroy message now? (Y/no)"
read DESTROY
if [ "$DESTROY" = "Y" ]; then
    DEL=temp/btcmsg
    secdelete
fi
clear
echo "Press enter to go back to BITCOIN MENU."
read
}
#-----------------------------------
## SHOW ALL ADDRESSES AND PUBKEYS ##
#-----------------------------------
showalladdr ()
{
echo -e "\nPress enter to see all addresses and pubkeys."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/*.addr | grep -e "Address" -e "Pubkey" | less
}
###########################################
##### STANDARD BTC ADDRESS MANAGEMENT #####
###########################################
#---------------------------
## CHECK FOR PRIVATE KEYS ##
#---------------------------
haspriv (){
HAS_SPRIV=$(ls btc-KeyRNG/ | grep -c "priv")
if [ "$HAS_SPRIV" = "0" ]; then
  echo ""
  echo_c "YOUR PRIVATE KEYS WILL BE ENCRYPTED WITH THE MASTER GPG KEY."
  echo_c "THE ONE THAT WAS CREATED WHEN YOU FIRST RAN THIS PROGRAM."
  echo_c
  echo_c "TO MAKE SURE YOU HAVE NOT FORGOTTON THE PASSPHRASE,"
  echo_c "YOU WILL NEED TO COMPLETE A CHALLENGE ONE TIME."
  echo ""
  read -p "Press enter to decrypt the challenge."
  TEST=$(gpg --armor --gen-random 2 38); echo -n "$TEST" > temp/test; gpg --homedir gpg-KeyRNG/ -ae -r KeyRNG temp/test
  echo ""
  TRY=$(gpg --homedir gpg-KeyRNG/ --quiet -d temp/test.asc)
  if [ "$TEST" != "$TRY" ]; then 
    read -p "Do you want to create a new master key? (Y/no)" NEWMK
      if [[ "$NEWMK" = "Y" ]]; then 
        firstrun
      else
        break
      fi
  fi
fi
}
#----------------
## NEW ADDRESS ##
#----------------
getnewaddress ()
{
KEYRNG=$(gpg --homedir gpg-KeyRNG/ --list-keys KeyRNG | grep pub | tr -d "pub" | cut -b 10- | cut -b -18)
HAS_SPRIV=$(ls btc-KeyRNG/ | grep -c "s.priv")
HAS_ADDRFILE=$(ls btc-KeyRNG/ | grep -c "standard")
if [ "$HAS_ADDRFILE" = "0" ]; then
    touch btc-KeyRNG/standard.addr
    chown -R "$USER" btc-KeyRNG/standard.addr
    chmod 0600 btc-KeyRNG/standard.addr
    echo_c "---------------------------------------" > btc-KeyRNG/standard.addr
    echo_c "| S T A N D A R D   A D D R E S S E S |" >> btc-KeyRNG/standard.addr
    echo_c "---------------------------------------" >> btc-KeyRNG/standard.addr
fi
if [ "$HAS_SPRIV" = "0" ]; then
    touch btc-KeyRNG/s.priv
    chown "$USER" btc-KeyRNG/s.priv
    chmod 0600 btc-KeyRNG/s.priv
    echo_c "-----------------------------------------------------------------" > btc-KeyRNG/s.priv
    echo_c "| S T A N D A R D   A D D R E S S E S   P R I V A T E   K E Y S |" >> btc-KeyRNG/s.priv
    echo_c "-----------------------------------------------------------------" >> btc-KeyRNG/s.priv
    gpg --homedir gpg-KeyRNG/ --yes --quiet --output btc-KeyRNG/s.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/s.priv && rm -rf btc-KeyRNG/s.priv
fi
PRIV_LOCKED=$(ls btc-KeyRNG/ | grep -c "s.priv.gpg")
if [ "$PRIV_LOCKED" = "1" ]; then
    echo "Unlock the private key file."
    gpg --homedir gpg-KeyRNG --yes --output btc-KeyRNG/s.priv -d btc-KeyRNG/s.priv.gpg && rm -rf btc-KeyRNG/s.priv.gpg
fi    
PRIVKEY=$(pybtctools/pybtctool random_key)
WIF_COMP=$(pybtctools/pybtctool encode_privkey $(echo -n "$PRIVKEY") wif_compressed)
PUBKEY=$(pybtctools/pybtctool privtopub $(echo -n "$WIF_COMP"))
ADDRESS=$(pybtctools/pybtctool pubkey_to_address $(echo -n "$PUBKEY"))
NUM_PRIV=$(grep -c "Pubkey" btc-KeyRNG/standard.addr)
if [[ "$NUM_PRIV" = "0" ]]; then
    echo -e "\n\nStandard Address 1: "$ADDRESS"\nStandard Privkey 1: "$WIF_COMP"" >> btc-KeyRNG/s.priv
    gpg --quiet  --homedir gpg-KeyRNG/ --output btc-KeyRNG/s.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/s.priv && srm -dr btc-KeyRNG/s.priv
    unset PW; unset CHKPW
    echo -e "\n\nStandard Address 1: "$ADDRESS"\nStandard Pubkey 1:  "$PUBKEY"\n---"
    echo "Add a note to address? (y/no)"
    read IS_NOTE
    if [[ "$IS_NOTE" = "y" ]]; then
        echo "Type the note and press enter:"
        read NOTE 
        echo -e "\n\nStandard Address 1: "$ADDRESS"     Note: "$NOTE"\nStandard Pubkey 1:  "$PUBKEY"\n---" >> btc-KeyRNG/standard.addr
        echo "DONE!"
        sleep 1
        clear
    else
        echo -e "\n\nStandard Address 1: "$ADDRESS"\nStandard Pubkey 1:  "$PUBKEY"\n---" >> btc-KeyRNG/standard.addr 
        echo "DONE!"
        sleep 1
        clear
    fi
else
    NUM_PRIV=$(expr "$NUM_PRIV" + 1)
    echo -e "\nStanadard Address "$NUM_PRIV": "$ADDRESS"\nStanadard Pubkey "$NUM_PRIV":  "$PUBKEY"\n---"
    echo -e "\nStanadard Address "$NUM_PRIV": "$ADDRESS"\nStanadard Privkey "$NUM_PRIV":  "$WIF_COMP"\n" >> btc-KeyRNG/s.priv
    gpg --quiet  --homedir gpg-KeyRNG/ --output btc-KeyRNG/s.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/s.priv && DEL=btc-KeyRNG/s.priv; secdelete
        echo "Add a note to address? (y/no)"
        read IS_NOTE
        if [[ "$IS_NOTE" = "y" ]]; then
            echo "Type the note and press enter:"
            read NOTE 
            echo -e "\nStandard Address "$NUM_PRIV": "$ADDRESS"     Note: "$NOTE"\nStandard Pubkey "$NUM_PRIV":  "$PUBKEY"\n---" >> btc-KeyRNG/standard.addr
            echo "DONE!"
            clear
        else
            echo -e "\nStandard Address "$NUM_PRIV": "$ADDRESS"\nStandard Pubkey "$NUM_PRIV":  "$PUBKEY"\n---" >> btc-KeyRNG/standard.addr
            echo "DONE!"
            clear
        fi 
fi
}
#---------------------------------------
## CREATE MULTIPLE STANDARD ADDRESSES ##
#---------------------------------------
multiplestandaddr ()
{
KEYRNG=$(gpg --homedir gpg-KeyRNG/ --list-keys KeyRNG | grep pub | tr -d "pub" | cut -b 10- | cut -b -18)
HAS_SPRIV=$(ls btc-KeyRNG/ | grep -c "s.priv")
HAS_ADDRFILE=$(ls btc-KeyRNG/ | grep -c "standard.addr")
if [ "$HAS_ADDRFILE" = "0" ]; then
    touch btc-KeyRNG/standard.addr
    chown -R "$USER" btc-KeyRNG/standard.addr
    chmod 0600 btc-KeyRNG/standard.addr
    echo_c "---------------------------------------" > btc-KeyRNG/standard.addr
    echo_c "| S T A N D A R D   A D D R E S S E S |" >> btc-KeyRNG/standard.addr
    echo_c "---------------------------------------" >> btc-KeyRNG/standard.addr
fi
if [ "$HAS_SPRIV" = "0" ]; then
    touch btc-KeyRNG/s.priv
    chown "$USER" btc-KeyRNG/s.priv
    chmod 0600 btc-KeyRNG/s.priv
    echo_c "-----------------------------------------------------------------" > btc-KeyRNG/s.priv
    echo_c "| S T A N D A R D   A D D R E S S E S   P R I V A T E   K E Y S |" >> btc-KeyRNG/s.priv
    echo_c "-----------------------------------------------------------------" >> btc-KeyRNG/s.priv
       echo -e "\nYOUR PRIVATE KEYS WILL BE ENCRYPTED WITH THE MASTER GPG KEY\nTHAT WAS CREATED WHEN YOU FIRST RAN THIS PROGRAM."
    echo -e "TO MAKE SURE YOU HAVE NOT FORGOT THE PASSPHRASE YOU WILL\nNEED TO COMPLETE A CHALLENGE."
    echo ""
    read -p "Press enter to decrypt the challenge."
    TEST=$(gpg --armor --gen-random 2 38); echo -n "$TEST" > temp/test; gpg --homedir gpg-KeyRNG/ -ae -r "$KEYRNG" temp/test
    echo ""
    TRY=$(gpg --homedir gpg-KeyRNG/ --quiet -d temp/test.asc)
    if [ "$TEST" != "$TRY" ]; then 
      read -p "Do you want to create a new master key? (Y/no)" NEWMK
        if [[ "$NEWMK" = "Y" ]]; then 
          firstrun
        else
          break
        fi
    fi
    gpg --homedir gpg-KeyRNG/ --quiet --output btc-KeyRNG/s.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/s.priv && rm -rf btc-KeyRNG/s.priv
fi
echo "Unlocking your private keys..."
gpg --homedir gpg-KeyRNG/ --quiet --output btc-KeyRNG/s.priv -d btc-KeyRNG/s.priv.gpg && rm -rf btc-KeyRNG/s.priv.gpg
echo -e "\nHow may standard addresses to create?"
read NUM
echo "Creating "$NUM" standard addresses..."
for i in $(seq 1 "$NUM")
do
    PRIVKEY=$(pybtctools/pybtctool random_key)
    WIF_COMP=$(pybtctools/pybtctool encode_privkey $(echo -n "$PRIVKEY") wif_compressed)
    PUBKEY=$(pybtctools/pybtctool privtopub $(echo -n "$WIF_COMP"))
    ADDRESS=$(pybtctools/pybtctool pubkey_to_address $(echo -n "$PUBKEY"))
    NUM_PRIV=$(grep -c "Pubkey" btc-KeyRNG/standard.addr)
    if [[ "$NUM_PRIV" = "0" ]]; then
        echo -e "\n\nStandard Address 1: "$ADDRESS"\nStandard Privkey 1:  "$WIF_COMP"\n" >> btc-KeyRNG/s.priv
        echo -e "\n\nStandard Address 1: "$ADDRESS"\nStandard Pubkey 1:  "$PUBKEY"\n---"
        echo -e "\n\nStandard Address 1: "$ADDRESS"\nStandard Pubkey 1:  "$PUBKEY"\n---" >> btc-KeyRNG/standard.addr
    else
        NUM_PRIV=$(expr "$NUM_PRIV" + 1)
        echo -e "\nStandard Address "$NUM_PRIV": "$ADDRESS"\nStandard Privkey "$NUM_PRIV":  "$WIF_COMP"\n" >> btc-KeyRNG/s.priv
        echo -e "\nStandard Address "$NUM_PRIV": "$ADDRESS"\nStandard Pubkey "$NUM_PRIV":  "$PUBKEY"\n---"
        echo -e "\nStandard Address "$NUM_PRIV": "$ADDRESS"\nStandard Pubkey "$NUM_PRIV":  "$PUBKEY"\n---" >> btc-KeyRNG/standard.addr
    fi
done
gpg --homedir gpg-KeyRNG/ --quiet --output btc-KeyRNG/s.priv.gpg  -ae -r "$KEYRNG" btc-KeyRNG/s.priv && srm -dr btc-KeyRNG/s.priv
unset PW; unset CHKPW
echo -e "\nDONE CREATING "$NUM" STANDARD ADDRESSES."
echo -e "ADDRESSES ARE STORED IN KeyRNG/btc-KeyRNG/standard.addr\n"
echo "Press enter to return to STANDARD ADDRESS MENU."
read
clear
}
#----------------------
## SHOW PRIVATE KEYS ##
#----------------------
showstandardpriv ()
{
echo "Unlocking private keys..."
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/s.priv -d btc-KeyRNG/s.priv.gpg && rm -rf btc-KeyRNG/s.priv.gpg
echo "Press enter to see private keys."
echo "Use up/down arrows to navigate. Press q when finished."
read
cat btc-KeyRNG/s.priv | less
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/s.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/s.priv && DEL=btc-KeyRNG/s.priv; secdelete
clear
}
#--------------------------------
## SHOW ALL STANDARD ADDRESSES ##
#--------------------------------
showaddr ()
{
echo "Press enter to see addresses."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/standard.addr | grep "Address" | less
}
#----------------------------------------
## SHOW STANDARD ADDRESSES AND PUBKEYS ##
#----------------------------------------
showallstandaddr ()
{
echo "Press enter to see addresses and private keys."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/standard.addr | less
}
############################################
##### ELECTRUM SEED ADDRESS MANAGEMENT #####
############################################
#----------------------
## CHECK/CREATE SEED ##
#----------------------
checkeleseed ()
{
KEYRNG=$(gpg --homedir gpg-KeyRNG/ --list-keys KeyRNG | grep pub | tr -d "pub" | cut -b 10- | cut -b -18)
HAS_SEEDFILE=$(ls btc-KeyRNG/ | grep -c "ele.seed")
if [[ "$HAS_SEEDFILE" -lt "1" ]]; then
    touch btc-KeyRNG/ele.seed
    touch btc-KeyRNG/ele.priv
    chown "$USER" btc-KeyRNG/ele*
    chmod 0600 btc-KeyRNG/ele*
    newelectrumseed
    echo_c "---------------------------------------------" > btc-KeyRNG/ele.priv
    echo_c "| E L E C T R U M   P R I V A T E   K E Y S |" >> btc-KeyRNG/ele.priv
    echo_c "---------------------------------------------" >> btc-KeyRNG/ele.priv
    clear
    echo ""
    echo_c "THIS IS YOUR PRIVATE SEED TO RESTORE PRIVATE KEYS."
    echo_c "WRITE IT DOWN SOMEWHERE SAFE AS A BACKUP!"
    echo -e "\nPress enter to see your seed. Press q when you are finished.\n"
    read
    echo -ne "\n"$SEED"\n" | less
    echo "Encrypting you seed and private keys file..."
    gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/ele.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/ele.priv && rm -rf btc-KeyRNG/ele.priv
    gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/ele.seed.gpg -ae -r "$KEYRNG"  btc-KeyRNG/ele.seed && rm -rf btc-KeyRNG/ele.seed
fi
clear
}
#-------------------------
## ELECTRUM CREATE SEED ##
#-------------------------
newelectrumseed ()
{
SEED=$(pybtctools/pybtctool random_electrum_seed)
echo -n ""$SEED"" > btc-KeyRNG/ele.seed
}
#-------------------------
## NEW ELECTRUM ADDRESS ##
#-------------------------
elecreateaddr ()
{
KEYRNG=$(gpg --homedir gpg-KeyRNG/ --list-keys KeyRNG | grep pub | tr -d "pub" | cut -b 10- | cut -b -18)
read -s -p "Master GPG Key Password: " PW
echo "Unlocking private keys and seed..."
gpg --homedir gpg-KeyRNG/ --quiet --passphrase "$PW" --yes --output btc-KeyRNG/ele.seed -d btc-KeyRNG/ele.seed.gpg && rm -rf btc-KeyRNG/ele.seed.gpg
gpg --homedir gpg-KeyRNG/ --quiet --passphrase "$PW" --yes --output btc-KeyRNG/ele.priv -d btc-KeyRNG/ele.priv.gpg && rm -rf btc-KeyRNG/ele.priv.gpg
unset PW
SEED=$(cat btc-KeyRNG/ele.seed)
HAS_ADDRFILE=$(ls btc-KeyRNG/ | grep -c "ele.addr")
if [ "$HAS_ADDRFILE" -lt "1" ]; then
    touch btc-KeyRNG/ele.addr
    chown -R "$USER" btc-KeyRNG/
    chmod 0600 btc-KeyRNG/ele.addr
    echo_c "----------------------------------------" > btc-KeyRNG/ele.addr
    echo_c "| E L E C T R U M    A D D R E S S E S |" >> btc-KeyRNG/ele.addr
    echo_c "----------------------------------------" >> btc-KeyRNG/ele.addr
    MPK=$(pybtctools/pybtctool electrum_mpk $(echo -n "$SEED"))
    echo -e "\n\nMaster Public Key:  "$MPK"" >> btc-KeyRNG/ele.addr
fi
ADDR_COUNT=$(cat btc-KeyRNG/ele.addr | grep -c "Pubkey")
if [[ "$ADDR_COUNT" = "0" ]]; then
    WIF_COMP=$(pybtctools/pybtctool electrum_privkey $(echo -n "$SEED") 0 wif_compressed)
    PUB=$(pybtctools/pybtctool privtopub $(echo -n "$WIF_COMP"))
    ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$PUB"))
    echo -e "\n\nEle Address 1: "$ADDR"\nEle Pubkey 1:  "$PUB"\n---"
    echo -e "\n\nEle Address 1: "$ADDR"\nEle Privkey 1:  "$WIF_COMP"\n" >> btc-KeyRNG/ele.priv
    echo "Add a note to address? (y/no)"
    read IS_NOTE
    if [[ "$IS_NOTE" = "y" ]]; then
        echo "Type the note and press enter:"
        read NOTE 
        echo -e "\nEle Address 1: "$ADDR"     Note: "$NOTE"\nEle Pubkey 1:  "$PUB"\n---" >> btc-KeyRNG/ele.addr
    else
        echo -e "\n\nEle Address 1: "$ADDR"\nEle Pubkey 1:  "$PUB"\n\n---" >> btc-KeyRNG/ele.addr
    fi
else
    ADDR_COUNT=$(expr "$ADDR_COUNT" + 1)
    WIF_COMP=$(pybtctools/pybtctool electrum_privkey $(echo -n "$SEED") $(echo -n "$ADDR_COUNT") wif_compressed)
    PUB=$(pybtctools/pybtctool privtopub $(echo -n "$WIF_COMP"))
    ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$PUB"))
    echo -e "\nEle Address "$ADDR_COUNT": "$ADDR"\nEle Pubkey "$ADDR_COUNT":  "$PUB"\n---"
    echo -e "\n\nEle Address "$ADDR_COUNT":\nEle Privkey "$ADDR_COUNT":  "$WIF_COMP"\n" >> btc-KeyRNG/ele.priv
    echo "Add a note to address? (y/no)"
    read IS_NOTE
    if [[ "$IS_NOTE" = "y" ]]; then
        echo "Type the note and press enter:"
        read NOTE 
        echo -e "\nEle Address "$ADDR_COUNT": "$ADDR"     Note: "$NOTE"\nEle Pubkey "$ADDR_COUNT":  "$PUB"\n---" >> btc-KeyRNG/ele.addr
    else
        echo -e "\nEle Address "$ADDR_COUNT": "$ADDR"\nEle Pubkey "$ADDR_COUNT":  "$PUB"\n---" >> btc-KeyRNG/ele.addr
    fi
fi
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/ele.seed.gpg -ae -r "$KEYRNG" btc-KeyRNG/ele.seed && DEL=btc-KeyRNG/ele.seed; secdelete
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/ele.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/ele.priv && DEL=btc-KeyRNG/ele.priv; secdelete
echo "DONE!"
clear
}
#--------------------------------------------
## CREATE MULTIPLE ELECTRUM SEED ADDRESSES ##
#--------------------------------------------
multipleeleaddr ()
{
KEYRNG=$(gpg --homedir gpg-KeyRNG/ --list-keys KeyRNG | grep pub | tr -d "pub" | cut -b 10- | cut -b -18)
read -s -p "Master GPG Key Password: " PW
echo "Unlock private keys and seed..."
gpg --homedir gpg-KeyRNG/ --quiet --passphrase "$PW" --yes --output btc-KeyRNG/ele.seed -d btc-KeyRNG/ele.seed.gpg && rm -rf btc-KeyRNG/ele.seed.gpg
gpg --homedir gpg-KeyRNG/ --quiet --passphrase "$PW" --yes --output btc-KeyRNG/ele.priv -d btc-KeyRNG/ele.priv.gpg && rm -rf btc-KeyRNG/ele.priv.gpg
unset PW
SEED=$(cat btc-KeyRNG/ele.seed)
HAS_ADDRFILE=$(ls btc-KeyRNG/ | grep -c "ele.addr")
if [ "$HAS_ADDRFILE" -lt "1" ]; then
    touch btc-KeyRNG/ele.addr
    chown -R "$USER" btc-KeyRNG/
    chmod 0600 btc-KeyRNG/ele.addr
    echo_c "----------------------------------------" > btc-KeyRNG/ele.addr
    echo_c "| E L E C T R U M    A D D R E S S E S |" >> btc-KeyRNG/ele.addr
    echo_c "----------------------------------------" >> btc-KeyRNG/ele.addr
    MPK=$(pybtctools/pybtctool electrum_mpk $(echo -n "$SEED"))
    echo "" >> btc-KeyRNG/ele.addr
    echo_c "Master Public Key:  "$MPK"" >> btc-KeyRNG/ele.addr
fi
echo ""
read -p "How many Electrum seeded addresses to create? " NUM
echo "Creating "$NUM" Electrum addresses..."
for i in $(seq 1 "$NUM")
do
    ADDR_COUNT=$(cat btc-KeyRNG/ele.addr | grep -c "Pubkey")
    if [[ "$ADDR_COUNT" = "0" ]]; then
        WIF_COMP=$(pybtctools/pybtctool electrum_privkey $(echo -n "$SEED") 0 wif_compressed)
        PUB=$(pybtctools/pybtctool privtopub $(echo -n "$WIF_COMP"))
        ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$PUB"))
        echo -e "\n\nEle Address 1: "$ADDR"\nEle Privkey 1:  "$WIF_COMP"\n" >> btc-KeyRNG/ele.priv
        echo -e "\n\nEle Address 1: "$ADDR"\nEle Pubkey 1:  "$PUB"\n---"
        echo -e "\n\nEle Address 1: "$ADDR"\nEle Pubkey 1:  "$PUB"\n---" >> btc-KeyRNG/ele.addr
    else
        ADDR_COUNT=$(expr "$ADDR_COUNT" + 1)
        WIF_COMP=$(pybtctools/pybtctool electrum_privkey $(echo -n "$SEED") $(echo -n "$ADDR_COUNT") wif_compressed)
        PUB=$(pybtctools/pybtctool privtopub $(echo -n "$WIF_COMP"))
        ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$PUB"))
        echo -e "\nEle Address "$ADDR_COUNT": "$ADDR"\nEle Privkey "$ADDR_COUNT":  "$WIF_COMP"" >> btc-KeyRNG/ele.priv
        echo -e "\nEle Address "$ADDR_COUNT": "$ADDR"\nEle Pubkey "$ADDR_COUNT":  "$PUB"\n---"
        echo -e "\nEle Address "$ADDR_COUNT": "$ADDR"\nEle Pubkey "$ADDR_COUNT":  "$PUB"\n---" >> btc-KeyRNG/ele.addr
    fi
done
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/ele.seed.gpg -ae -r "$KEYRNG" btc-KeyRNG/ele.seed && DEL=btc-KeyRNG/ele.seed; secdelete
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/ele.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/ele.priv && DEL=btc-KeyRNG/ele.priv; secdelete
unset PW
echo -e "\nDONE CREATING "$NUM" ELECTRUM ADDRESSES."
echo -e "ADDRESSES ARE STORED IN KeyRNG/btc-KeyRNG/ele.addr\n"
echo "Press enter to return to ELECTRUM ADDRESS MENU."
read
clear
}
#---------------------------------
## SHOW ELECTRUM ADDRESSES ONLY ##
#---------------------------------
eleshowaddr ()
{
echo "Press enter to see addresses."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/ele.addr | grep "Address" | less
}
#-----------------------------------
## SHOW ELECTRUM ADDR AND PUBKEYS ##
#-----------------------------------
eleshowall ()
{
echo "Press enter to see addresses and private keys."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/ele.addr | less
}
#-----------------------------------
## SHOW ALL ELECTRUM PRIVATE KEYS ##
#-----------------------------------
showelepriv ()
{
echo "Unlocking keys..."
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/ele.priv -d btc-KeyRNG/ele.priv.gpg && rm -rf btc-KeyRNG/ele.priv.gpg
echo "Press enter to see private keys."
echo "Use up/down arrows to navigate. Press q when finished."
read
cat btc-KeyRNG/ele.priv | less
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/ele.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/ele.priv && DEL=btc-KeyRNG/ele.priv; secdelete
clear
}
#-----------------------
## ELECTRUM SHOW SEED ##
#-----------------------
eleshowseed (){
clear
echo "Press enter to see your bip32 private keys."
echo "Use up/down arrows to navigate. Press q when finished."
read
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/ele.seed -d btc-KeyRNG/ele.seed.gpg && rm -rf btc-KeyRNG/ele.seed.gpg
cat btc-KeyRNG/ele.seed | less
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/ele.seed.gpg -ae -r "$KEYRNG" btc-KeyRNG/ele.seed && DEL=btc-KeyRNG/ele.seed; secdelete
}
########################################
##### BIP32 SEED ADDRESS FUNCTIONS #####
########################################
#----------------------
## CHECK/CREATE SEED ##
#----------------------
checkbipseed ()
{
KEYRNG=$(gpg --homedir gpg-KeyRNG/ --list-keys KeyRNG | grep pub | tr -d "pub" | cut -b 10- | cut -b -18)
HAS_SEEDFILE=$(ls btc-KeyRNG/ | grep -c "bip.seed")
if [ "$HAS_SEEDFILE" -lt "1" ]; then
    touch btc-KeyRNG/bip.priv
    touch btc-KeyRNG/bip.seed
    chown "$USER" btc-KeyRNG/*
    chmod 0600 btc-KeyRNG/bip.seed
    chmod 0600 btc-KeyRNG/bip.priv
    newbipseed
    clear
    echo "THIS IS YOUR PRIVATE BIP32 SEED TO RESTORE PRIVATE KEYS."
    echo "WRITE IT DOWN SOMEWHERE SAFE AS A BACKUP!"
    echo "Press enter to see your seed. Press q when finished."
    read
    echo -ne "\n"$SEED"\n" | less
    echo "Encrypting you seed and private keys file..."
    gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/bip.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/bip.priv && rm -rf btc-KeyRNG/bip.priv
    gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/bip.seed.gpg -ae -r "$KEYRNG"  btc-KeyRNG/bip.seed && rm -rf btc-KeyRNG/bip.seed
fi
clear
}
#----------------------
## BIP32 CREATE SEED ##
#----------------------
newbipseed ()
{
SEED=$(pybtctools/pybtctool random_electrum_seed | pybtctools/pybtctool -s slowsha | pybtctools/pybtctool -s changebase 16 256 | pybtctools/pybtctool -b changebase 256 16 | pybtctools/pybtctool -s bip32_master_key)
echo -en ""$SEED"" > btc-KeyRNG/bip.seed
}
#-----------------------------
## BIP32 CREATE NEW ADDRESS ##
#-----------------------------
bipcreateaddr ()
{
KEYRNG=$(gpg --homedir gpg-KeyRNG/ --list-keys KeyRNG | grep pub | tr -d "pub" | cut -b 10- | cut -b -18)
read -s -p "Master GPG Key Password: " PW
echo "Unlock private keys and seed..."
gpg --homedir gpg-KeyRNG/ --quiet --passphrase "$PW" --yes --output btc-KeyRNG/bip.seed -d btc-KeyRNG/bip.seed.gpg && rm -rf btc-KeyRNG/bip.seed.gpg
gpg --homedir gpg-KeyRNG/ --quiet --passphrase "$PW" --yes --output btc-KeyRNG/bip.priv -d btc-KeyRNG/bip.priv.gpg && rm -rf btc-KeyRNG/bip.priv.gpg
unset PW
SEED=$(cat btc-KeyRNG/bip.seed)
HAS_ADDRFILE=$(ls btc-KeyRNG/ | grep -c "bip.addr")
if [[ "$HAS_ADDRFILE" = "0" ]]; then
    touch btc-KeyRNG/bip.priv
    touch btc-KeyRNG/bip.seed
    chown -R "$USER" btc-KeyRNG/
    chmod 0600 btc-KeyRNG/*
    XPRIV=$(pybtctools/pybtctool bip32_ckd $(echo -n "$SEED") 0)
    XPUB=$(pybtctools/pybtctool bip32_privtopub $(echo -n "$XPRIV"))
    ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$XPUB"))
    echo -e "\n\nBIP32 Address 1: "$ADDR"\nBIP32 Pubkey 1:  "$XPUB"\n---"
    echo_c "---------------------------------------" > btc-KeyRNG/bip.priv
    echo_c "| B I P 3 2   P R I V A T E   K E Y S |" >> btc-KeyRNG/bip.priv
    echo_c "---------------------------------------" >> btc-KeyRNG/bip.priv
    touch btc-KeyRNG/bip.addr
    chown -R "$USER" btc-KeyRNG/
    chmod 0600 btc-KeyRNG/bip.addr
    echo_c "----------------------------------" > btc-KeyRNG/bip.addr
    echo_c "| B I P 3 2    A D D R E S S E S |" >> btc-KeyRNG/bip.addr
    echo_c "----------------------------------" >> btc-KeyRNG/bip.addr
fi
ADDR_COUNT=$(cat btc-KeyRNG/bip.addr | grep -c "Pubkey")
if [[ "$ADDR_COUNT" = "0" ]]; then
    XPRIV=$(pybtctools/pybtctool bip32_ckd $(echo -n "$SEED") 0)
    XPUB=$(pybtctools/pybtctool bip32_privtopub $(echo -n "$XPRIV"))
    ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$XPUB"))
    echo_c "---------------------------------------" > btc-KeyRNG/bip.priv
    echo_c "| B I P 3 2   P R I V A T E   K E Y S |" >> btc-KeyRNG/bip.priv
    echo_c "---------------------------------------" >> btc-KeyRNG/bip.priv
    echo "Add a note to address? (y/no)"
    read IS_NOTE
    echo -e "\n\nBIP32 Address 1: "$ADDR"\nBIP32 Privkey 1:  "$XPRIV"\n" >> btc-KeyRNG/bip.priv
    if [[ "$IS_NOTE" = "y" ]]; then
        echo "Type the note and press enter:"
        read NOTE 
        echo -e "\n\nBIP32 Address 1: "$ADDR"     Note: "$NOTE"\nBIP32 Pubkey 1:  "$XPUB"\n---" >> btc-KeyRNG/bip.addr
        echo "DONE!"
        clear
    else
        echo -e "\n\nBIP32 Address 1: "$ADDR"\nBIP32 Pubkey 1:  "$XPUB"\n---" >> btc-KeyRNG/bip.addr
        echo "DONE!"
        clear
    fi
else
    ADDR_COUNT=$(expr "$ADDR_COUNT" + 1)
    XPRIV=$(pybtctools/pybtctool bip32_ckd $(echo -n "$SEED") $(echo -n "$ADDR_COUNT"))
    XPUB=$(pybtctools/pybtctool bip32_privtopub $(echo -n "$XPRIV"))
    ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$XPUB"))
    echo -e "\nBIP32 Address "$ADDR_COUNT": "$ADDR"\nBIP32 Privkey "$ADDR_COUNT":  "$XPRIV"\n" >> btc-KeyRNG/bip.priv
    echo -e "\n\nBIP32 Address "$ADDR_COUNT": "$ADDR"\nBIP32 Pubkey "$ADDR_COUNT":  "$XPUB"\n---"
    echo "Add a note to address? (y/no)"
    read IS_NOTE
    if [[ "$IS_NOTE" = "y" ]]; then
        echo "Type the note and press enter:"
        read NOTE 
        echo -e "\nBIP32 Address "$ADDR_COUNT": "$ADDR"     Note: "$NOTE"\nBIP32 Pubkey "$ADDR_COUNT":  "$XPUB"\n---" >> btc-KeyRNG/bip.addr
        echo "DONE!"
        clear
    else
        echo -e "\nBIP32 Address "$ADDR_COUNT": "$ADDR"\nBIP32 Pubkey "$ADDR_COUNT":  "$XPUB"\n---" >> btc-KeyRNG/bip.addr
        echo "DONE!"
        clear
    fi
fi
echo ""
echo "Cleaning up..."
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/bip.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/bip.priv && DEL=btc-KeyRNG/bip.priv; secdelete
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/bip.seed.gpg -ae -r "$KEYRNG"  btc-KeyRNG/bip.seed && DEL=btc-KeyRNG/bip.seed; secdelete
}
#------------------------------------
## CREATE MULTIPLE BIP32 ADDRESSES ##
#------------------------------------
multiplebipaddr ()
{
KEYRNG=$(gpg --homedir gpg-KeyRNG/ --list-keys KeyRNG | grep pub | tr -d "pub" | cut -b 10- | cut -b -18)
read -s -p "Master GPG Key Password: " PW
gpg --homedir gpg-KeyRNG/ --quiet --passphrase "$PW" --yes --output btc-KeyRNG/bip.seed -d btc-KeyRNG/bip.seed.gpg && rm -rf btc-KeyRNG/bip.seed.gpg
gpg --homedir gpg-KeyRNG/ --quiet --passphrase "$PW" --yes --output btc-KeyRNG/bip.priv -d btc-KeyRNG/bip.priv.gpg && rm -rf btc-KeyRNG/bip.priv.gpg
unset PW
SEED=$(cat btc-KeyRNG/bip.seed)
HAS_ADDRFILE=$(ls btc-KeyRNG/ | grep -c "bip.addr")
if [ "$HAS_ADDRFILE" -lt "1" ]; then
    touch btc-KeyRNG/bip.addr
    chown -R "$USER" btc-KeyRNG/
    chmod 0600 btc-KeyRNG/bip.addr
    echo_c "----------------------------------" > btc-KeyRNG/bip.addr
    echo_c "| B I P 3 2    A D D R E S S E S |" >> btc-KeyRNG/bip.addr
    echo_c "----------------------------------" >> btc-KeyRNG/bip.addr
fi
echo -e "\nHow may BIP32 seed addresses to create?"
read NUM
echo "Creating "$NUM" BIP32 addresses..."
for i in $(seq 1 "$NUM")
do
    ADDR_COUNT=$(cat btc-KeyRNG/bip.addr | grep -c "Pubkey")
    if [[ "$ADDR_COUNT" = "0" ]]; then
        XPRIV=$(pybtctools/pybtctool bip32_ckd $(echo -n "$SEED") 0)
        XPUB=$(pybtctools/pybtctool bip32_privtopub $(echo -n "$XPRIV"))
        ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$XPUB"))
        echo -e "\n\nBIP32 Address 1: "$ADDR"\nBIP32 Pubkey 1:  "$XPUB"\n---"
        echo -e "\n\nBIP32 Address 1: "$ADDR"\nBIP32 Pubkey 1:  "$XPUB"\n---" >> btc-KeyRNG/bip.addr
        echo -e "\n\nBIP32 Address 1: "$ADDR"\nBIP32 Privkey 1:  "$XPRIV"\n" >> btc-KeyRNG/bip.priv
    else
        ADDR_COUNT=$(expr "$ADDR_COUNT" + 1)
        XPRIV=$(pybtctools/pybtctool bip32_ckd $(echo -n "$SEED") $(echo -n "$ADDR_COUNT"))
        XPUB=$(pybtctools/pybtctool bip32_privtopub $(echo -n "$XPRIV"))
        ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$XPUB"))
        echo -e "\nBIP32 Address "$ADDR_COUNT": "$ADDR"\nBIP32 Pubkey "$ADDR_COUNT":  "$XPUB"\n---"
        echo -e "\nBIP32 Address "$ADDR_COUNT": "$ADDR"\nBIP32 Pubkey "$ADDR_COUNT":  "$XPUB"\n---" >> btc-KeyRNG/bip.addr
        echo -e "\n\nBIP32 Address "$ADDR_COUNT": "$ADDR"\nBIP32 Privkey "$ADDR_COUNT":  "$XPRIV"\n" >> btc-KeyRNG/bip.priv
    fi
done
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/bip.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/bip.priv && DEL=btc-KeyRNG/bip.priv; secdelete
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/bip.seed.gpg -ae -r "$KEYRNG"  btc-KeyRNG/bip.seed && DEL=btc-KeyRNG/bip.seed; secdelete
echo -e "\nDONE CREATING "$NUM" BIP32 ADDRESSES."
echo -e "ADDRESSES AND PRIVKEYS STORED IN KeyRNG/btc-KeyRNG/bip.addr\n"
echo "Press enter to return to BIP32 ADDRESS MENU."
read
}
#------------------------------
## BIP32 SHOW ADDRESSES ONLY ##
#------------------------------
bipshowaddr ()
{
clear
echo "Press enter to see addresses."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/bip.addr | grep -e "Address" | less
}
#--------------------------------
## BIP32 SHOW ADDR AND PUBKEYS ##
#--------------------------------
bipshowall ()
{
clear
echo "Press enter to see addresses and private keys."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/bip.addr | less
}
#------------------------
## BIP32 SHOW PRIVKEYS ##
#------------------------
bipshowpriv(){
echo ""
echo "Unlocking keys..."
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/bip.priv -d btc-KeyRNG/bip.priv.gpg && rm -rf btc-KeyRNG/bip.priv.gpg
echo ""
echo "Press enter to see your bip32 private keys."
read -p "Use up/down arrows to navigate. Press q when finished."
cat btc-KeyRNG/bip.priv | less
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/bip.priv.gpg -ae -r "$KEYRNG" btc-KeyRNG/bip.priv && DEL=btc-KeyRNG/bip.priv; secdelete
}
#--------------------
## BIP32 SHOW SEED ##
#--------------------
bipshowseed (){
clear
echo "Press enter to see your bip32 private keys."
echo "Use up/down arrows to navigate. Press q when finished."
read
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/bip.seed -d btc-KeyRNG/bip.seed.gpg && rm -rf btc-KeyRNG/bip.seed.gpg
cat btc-KeyRNG/bip.seed | less
gpg --homedir gpg-KeyRNG/ --quiet --yes --output btc-KeyRNG/bip.seed.gpg -ae -r "$KEYRNG" btc-KeyRNG/bip.seed && DEL=btc-KeyRNG/bip.seed; secdelete
}
#
############### MULTISIG ADDRESSES ###############
#
makemultisigaddr (){
clear
echo ""
echo_c "TO CREATE A MULTISIG ADDRESS YOU NEED AT LEAST 2 PUBLIC KEYS."
echo ""
read -p "Do you plan to use public keys stored in KeyRNG? (y/no) " here
if [ "$here" != "no" ]; then
  echo ""
  echo "Printing list of all addresses and public keys."
  echo "Please copy all public keys you intend to use (2-15)."
  echo ""
  read -p "Press enter to see all public keys."
  cat btc-KeyRNG/*.addr | grep -e "Address" -e "Pubkey" | less
fi
read -p "How many total addresses to use: (2-15) " m
while ! [[ "$m" =~ ^[0-9]+$ ]]; do
    echo "Sorry integers only"
    read -p "How many total addresses to use: (1-15)" m
done
read -p "How many signatures required to spend? (1-"$m") " n
while ! [[ "$n" =~ ^[0-9]+$ ]]; do
    echo "Sorry integers only"
    read -p "How many signatures required to spend? (1-"$m") " n
done
a=1
rm -rf temp/createms
touch temp/createms
while [ "$m" -gt "0" ]; do
  read -p "Input public key "$a": " addr
  a=`expr "$a" + 1`
  m=`expr "$m" - 1`
  echo -en "\n$addr \n" >> temp/createms
done
script=$(pybtctools/pybtctool mk_multisig_script $(cat temp/createms | xargs) "$n" "$m")
msaddr=$(pybtctools/pybtctool scriptaddr "$script")
echo ""
echo ""
echo_c "HERE IS YOUR ADDRESS AND REDEEM SCRIPT."
echo ""
echo "Address: "$msaddr""
echo ""
echo "Script: "$script""
echo ""
read -p "Would you like to save this script and address to a file? (Y/no) " SAVE
if [ "$SAVE" = "Y" ]; then
  HAS_FILE=$(ls btc-KeyRNG/ | grep -c "multisig.addr")
    if [ "$HAS_FILE" = "0" ]; then
      touch btc-KeyRNG/multisig.addr
      chown -R "$USER" btc-KeyRNG/multisig.addr
      chmod 0600 btc-KeyRNG/multisig.addr
      echo_c "--------------------------------------------------------" > btc-KeyRNG/multisig.addr
      echo_c "| M U L T I S I G    A D D R E S S E S / S C R I P T S |" >> btc-KeyRNG/multisig.addr
      echo_c "--------------------------------------------------------" >> btc-KeyRNG/multisig.addr
    fi
  a=$(grep -c "Address" btc-KeyRNG/multisig.addr)
  if  [ "$a" = "0" ]; then
    a=`expr "$a" + 1`
  fi
  echo -e "\n\nMultisig Address "$a": "$msaddr"\n" >> btc-KeyRNG/multisig.addr
  echo -e "Script "$a": "$script"\n---" >> btc-KeyRNG/multisig.addr
fi
read -p "Press enter to remove temp file and return to MULTISIG ADDRESS MENU."
DEL=temp/createms; secdelete
}
#--------------------------------------------
## SHOW ALL MULTISIG ADDRESSES AND SCRIPTS ##
#--------------------------------------------
showmsaddr (){
cat btc-KeyRNG/multisig.addr | less
}
#####################################
##### BLOCKCHAIN.INFO API CALLS #####
#####################################
if [ "BCI_API" -gt "0" ]; then
  HAVE_API=y
fi
mktx (){
echo ""
echo_c "MAKE NEW TRANSACTION"
echo ""
read -p "See your address for an address to send from? (Y/no) " seeaddr
if [ "$seeaddr" = "Y" ]; then
  showalladdr
fi
echo ""
read -p "Input address to send from: " ADDR
echo "Getting address history..."
if  [[ "$USE_TOR" = "y" && "$HAVE_API" = "y" ]]; then
    HIST=$(curl --silent -x socks5://127.0.0.1:9050 --get https://blockchainbdgpzk.onion/rawaddr/"$ADDR"?api_code="$BCI_API")
elif [[ "$USE_TOR" = "y" && "$HAVE_API" != "y" ]]; then
    HIST=$(curl --silent -x socks5://127.0.0.1:9050 --get https://blockchainbdgpzk.onion/rawaddr/"$ADDR")
elif [[ "$USE_TOR" != "y" && "$HAVE_API" = "y" ]]; then
    HIST=$(curl --silent --get https://blockchain.info/rawaddr/"$ADDR"?api_code="$BCI_API")
else
    HIST=$(curl --silent --get https://blockchain.info/rawaddr/"$ADDR")
fi
total=$(echo "$HIST" | grep -e "final_balance" | tr -d "\"\," | cut -b 16-)
echo ""
echo "Total Available in "$ADDR": "$total" Satoshis"
echo ""
read -p "Input address to send to: " sendaddr
read -p "Input amount to send in satoshis: " sendamount
fee=20000
total=$(expr $total - $fee)
while [ "$total" -lt "1" ]
do
  echo "Not enough in $ADDR to send."
  total=$(echo "$HIST" | grep -e "total_received" | tr -d "\"\," | cut -b 17-)
  echo ""
  echo "Total Available in "$ADDR": "$total" Satoshis"
  echo ""
  read -p "Input address to send to: " sendaddr
  read -p "Input amount to send in satoshis: " sendamount
  fee=20000
  total=$(expr $total - $fee)
done
change=$(expr $total - $sendamount)
clear
echo ""
echo_c "REVIEW TRANSACTION"
echo ""
echo "Amount To Send: "$sendamount" satoshis"
echo "To Address: "$sendaddr"" 
echo "Fee: 20000 satoshis"
if [ "$change" -gt "0" ]; then
  echo "Change: "$change""
fi
echo ""
read -p "Is this correct so far (y/no)? " correct
while [ "$correct" = "no" ]
do
  echo "Total Available in "$ADDR": "$total" Satoshis"
  echo ""
  read -p "Input address to send to: " sendaddr
  read -p "Input amount to send in satoshis: " sendamount
  fee=20000
  total=$(expr $total - $fee)
  while [ "$total" -lt "1" ]
  do
    echo "Not enough in $ADDR to send."
    total=$(echo "$HIST" | grep -e "total_received" | tr -d "\"\," | cut -b 17-)
    echo ""
    echo "Total Available in "$ADDR": "$total" Satoshis"
    echo ""
    read -p "Input address to send to: " sendaddr
    read -p "Input amount to send in satoshis: " sendamount
    fee=20000
    total=$(expr $total - $fee)
  done
  change=$(expr $total - $sendamount)
  clear
  echo ""
  echo_c "REVIEW TRANSACTION"
  echo ""
  echo "Amount To Send: "$sendamont" satoshis"
  echo "To Address: "$sendaddr"" 
  echo "Fee: 20000 satoshis"
  if [ "$change" -gt "0" ]; then
    echo "Change: "$change""
  fi
  echo ""
  read -p "Is this correct so far? (y/no) " correct
done
if [ "$change" -gt "0" ]; then
  echo ""
  read -p "See addresses to send change to? (y/no) " see
  if [ "$see" != "no" ]; then
    echo ""
    echo "Use up/down arrows to navigate. Press q when finished."
    read -p "Press enter to see possible addresses for change."
    cat btc-KeyRNG/*.addr | grep "Address" | less
  fi
read -p "Input address for the change of "$change" satoshis: " changeaddr
fi
numouts=$(echo "$HIST" | grep -e "$ADDR" -A 2 | grep -c "value")
numouts=$(expr $numouts + 1)
po=1
vo=1
touch temp/mktx
while [[ "$po" -lt "$numouts" ]]
do
  echo "$HIST" | grep "hash" | tr -d " " | tr -d "\"\}\{\]\[\-\," | tail -n "$po" | head -n 1 | cut -b 6- | sed 's|$|:|g' >> temp/mktx #get pouts
  echo "$HIST" | grep -e "$ADDR" -A 2 | tr -d " " | tr -d "\"\}\{\]\[\-\," | tail -n "$vo" | head -n 1 | cut -b 3- >> temp/mktx #get matching nout
  po=$(expr $po + 1)
  vo=$(expr $vo + 4)
done
pvouts=$(cat temp/mktx | xargs | sed 's|\:\ |:|g') # all previous outputs:nout out:n ...
if [[ "$change" -gt "0" ]]; then
  rand=$(od -A n -t d -N 3 /dev/urandom)
  if [[ $(($rand%2)) -eq 0 ]]; then
    tx=$(pybtctools/pybtctool mktx $(echo -n "$pvouts") "$sendaddr":"$sendamount" "$changeaddr":"$change")
  else
    tx=$(pybtctools/pybtctool mktx $(echo -n "$pvouts") "$changeaddr":"$change" "$sendaddr":"$sendamount")
  fi
else
  tx=$(pybtctools/pybtctool mktx $(echo -n "$pvouts") "$sendaddr":"$sendamount")
fi
echo_c "TRANSACTION IS CREATED, BUT NOT SIGNED."
echo ""
read -p "Do you want to sign it now? (y/no) " signit
if  [ "$signit" = no ]; then
  touch btc-KeyRNG/unsigned.tx
  ustx=(grep -c "TX" btc-KeyRNG/unsigned.tx)
  echo "Saving tx to btc-KeyRNG/unsigned.tx as TX:"$ustx"."
  echo -en "\nTX:"$ustx"\n"$tx"\n---\n" >> btc-KeyRNG/unsigned.tx
  read -p "Press enter to return to BLOCKCHAIN INTERACTION MENU."
  break
fi
numouts=$(echo "$HIST" | grep -e "$ADDR" -A 2 | grep -c "value")
no=0
echo ""
echo_c "Now we need the private key from "$ADDR"."
echo ""
read -p "Do you need to look it up now? (Y/no) " lookup
  while [[ "$lookup" = "Y" ]]
  do
  read -p "Standard, Electrum, or BIP32 private key? (s,e,b) " type
    if [[ "$type" = "s" ]]; then
      showstandardpriv
    elif [[ "$type" = "e" ]]; then
      showelepriv
    else
      bipshowpriv
    fi
  read -p "Do you need to see different private keys? (Y/no) " lookup
  done  
read -p "Input private key: " priv
echo 
while [[ "$no" -lt "$numouts" ]]
do
  pybtctools/pybtctool sign "$tx" "$no" "$priv" > temp/mktx
  no=$(expr $no + 1)
  tx=$(cat temp/mktx)
done
echo "Cleaning up temp files..."
DEL=temp/mktx; secdelete
echo ""
echo_c "TRANSACTION IS SIGNED."
echo ""
read -p "Would you like to see it now? (Y/no) " seeit
  if  [ "$seeit" = "Y" ]; then
    echo "Use up/down arrows to navigate. Press q when finished."
    read -p "Press enter to see signed tx."
    echo "$tx" | less
  fi
echo ""
read -p "Would you like to push the tx to the network now? (Y/no) " push
if [[ "$push" = "Y" ]]; then
  if  [[ "$USE_TOR" = "y" && "$HAVE_API" = "y" ]]; then
    HIST=$(curl --silent -x socks5://127.0.0.1:9050 -d tx="$tx" https://blockchainbdgpzk.onion/pushtx?api_code="$BCI_API")
  elif [[ "$USE_TOR" = "y" && "$HAVE_API" != "y" ]]; then
    HIST=$(curl --silent -x socks5://127.0.0.1:9050 -d tx="$tx" https://blockchainbdgpzk.onion/pushtx)
  elif [[ "$USE_TOR" != "y" && "$HAVE_API" = "y" ]]; then
    HIST=$(curl --silent -d tx="$tx" https://blockchain.info/pushtx?api_code="$BCI_API")
  else
    HIST=$(curl --silent -d tx="$tx" https://blockchain.info/pushtx)
  fi
else
  read -p "Would you like to save the signed transaction hash somewhere? (y/NO) " savestx
  if [ "$savestx" !=  "NO" ]; then
    read -p "Path or filename to save it to: " file
    echo "$stx" > "$file"
  fi
fi
read -p "Done! Press enter to return to BLOCKCHAIN INTERACTION MENU."
}
#------------------
## CHECK UNSPENT ##
#------------------
checkunspent ()
{
clear

read -p "See a list of the addresses in KeyRNG? (y/no) " LIST
if [ "$LIST" != "no" ]; then
    echo -e "\nPress enter to see addresses."
    echo "Use up/down arrows to navigate. Press "q" when finished."
    read
    cat btc-KeyRNG/*.addr | grep Address | less
fi
echo -e "\nPaste address to check unspent outputs with 0 confirmations."
read ADDR
echo "Getting unspent outputs..."
if  [[ "$USE_TOR" = "y" && "$HAVE_API" = "y" ]]; then
    UNSPENT=$(curl --silent -x socks5://127.0.0.1:9050 --get https://blockchainbdgpzk.onion/q/addressbalance/"$ADDR"?api_code="$BCI_API")
elif [[ "$USE_TOR" = "y" && "$HAVE_API" != "y" ]]; then
    UNSPENT=$(curl --silent -x socks5://127.0.0.1:9050 --get https://blockchainbdgpzk.onion/q/addressbalance/"$ADDR")
elif [[ "$USE_TOR" != "y" && "$HAVE_API" = "y" ]]; then
    UNSPENT=$(curl --silent --get https://blockchain.info/q/addressbalance/"$ADDR"?api_code="$BCI_API")
else
    UNSPENT=$(curl --silent --get https://blockchain.info/q/addressbalance/"$ADDR")
fi
echo -e "\nAmount is in Satoshis: "$UNSPENT"\n"
read -p "Press enter to return to BLOCKCHAIN MENU."
}
#-------------------
## RAW TX DETAILS ##
#-------------------
getrawtx ()
{
clear
echo -e "\nPaste the transaction hash:"
read TXID
echo "Getting raw transaction details..."
if  [[ "$USE_TOR" = "y" && "$HAVE_API" = "y" ]]; then
    RAWTX=$(curl --silent -x socks5://127.0.0.1:9050 --get https://blockchainbdgpzk.onion/rawtx/"$TXID"?api_code="$BCI_API")
elif [[ "$USE_TOR" = "y" && "$HAVE_API" != "y" ]]; then
    RAWTX=$(curl --silent -x socks5://127.0.0.1:9050 --get https://blockchainbdgpzk.onion/rawtx/"$TXID")
elif [[ "$USE_TOR" != "y" && "$HAVE_API" = "y" ]]; then
    RAWTX=$(curl --silent --get https://blockchain.info/rawtx/"$TXID"?api_code="$BCI_API")
else
    RAWTX=$(curl --silent --get https://blockchain.info/rawtx/"$TXID")
fi
echo "Use up/down arrows to navigate. Press "q" when finished."
read -p "Press enter to see transaction details."
echo "$RAWTX" | tr -d "\}\{\,\]\"\[" | sed -e 's|         ||g' -e 's|   ||g' | less
}
#------------------------
## RAW ADDRESS HISTORY ##
#------------------------
rawaddrhist ()
{
clear
echo "See a list of the addresses in KeyRNG? (y/no)"
read LIST
if [ "$LIST" != "no" ]; then
    echo -e "\nPress enter to see addresses."
    echo "Use up/down arrows to navigate. Press "q" when finished."
    read
    cat btc-KeyRNG/*.addr | grep Address | less
fi
echo -e "\nPaste address to check raw history."
read ADDR
echo "Getting history..."
if  [[ "$USE_TOR" = "y" && "$HAVE_API" = "y" ]]; then
    HIST=$(curl --silent -x socks5://127.0.0.1:9050 --get https://blockchainbdgpzk.onion/rawaddr/"$ADDR"?api_code="$BCI_API")
elif [[ "$USE_TOR" = "y" && "$HAVE_API" != "y" ]]; then
    HIST=$(curl --silent -x socks5://127.0.0.1:9050 --get https://blockchainbdgpzk.onion/rawaddr/"$ADDR")
elif [[ "$USE_TOR" != "y" && "$HAVE_API" = "y" ]]; then
    HIST=$(curl --silent --get https://blockchain.info/rawaddr/"$ADDR"?api_code="$BCI_API")
else
    HIST=$(curl --silent --get https://blockchain.info/rawaddr/"$ADDR")
fi
read -p "Press enter to see history."
echo "Use up/down arrows to navigate. Press "q" when finished."
echo "$HIST" | tr -d "\}\{\,\]\"\[" | sed -e 's|         ||g' -e 's|   ||g'
}
#####################  M E N U S ######################
welcomemenu (){
clear
wmx="---------------------------------------"
wmy="| W E L C O M E    T O    K e y R N G |"
wmz="---------------------------------------"
bannr="- P R I V A C Y    B E F O R E    P R O F I T -"
echo_c "$wmx"
echo_c "$wmy"
echo_c "$wmz"
echo ""
echo_c "$bannr"
echo ""; }

mainmenu (){
clear
mmx="-------------------------------------"
mmy="| K e y R N G    M A I N    M E N U |"
mmz="-------------------------------------"
bannr="- P R I V A C Y    B E F O R E    P R O F I T -"
echo_c "$mmx"
echo_c "$mmy"
echo_c "$mmz"
echo ""
echo_c "$bannr"
echo ""; }

gpgmainmenu (){
clear
gmmx="-----------------------------------------------"
gmmy="| G n u P G    M A N A G E M E N T    M E N U |"
gmmz="-----------------------------------------------"
echo_c "$gmmx"
echo_c "$gmmy"
echo_c "$gmmz"; }

keymanagementmenu (){
clear
kmx="-------------------------------------------"
kmy="| K E Y    M A N A G E M E N T    M E N U |"
kmz="-------------------------------------------"
echo_c "$kmx"
echo_c "$kmy"
echo_c "$kmz"; }

pubkeymenu (){
clear
pkx="-------------------------------------"
pky="| P U B L I C    K E Y S    M E N U |"
pkz="-------------------------------------"
echo_c "$pkx"
echo_c "$pky"
echo_c "$pkz"; }

importkeysmenu (){
clear
ikx="-------------------------------------"
iky="| I M P O R T    K E Y S    M E N U |"
ikz="-------------------------------------"
echo_c "$ikx"
echo_c "$iky"
echo_c "$ikz"; }

exportkeysmenu (){
clear
esx="-----------------------------------------------"
esy="| E X P O R T / S E N D    K E Y S    M E N U |"
esz="-----------------------------------------------"
echo_c "$esx"
echo_c "$esy"
echo_c "$esz"; }

seckeysmenu (){
clear
skx="-------------------------------------"
sky="| S E C R E T    K E Y S    M E N U |"
skz="-------------------------------------"
echo_c "$skx"
echo_c "$sky"
echo_c "$skz"; }

importseckeysmenu (){
clear
iskx="----------------------------------------------------"
isky="| I M P O R T    S E C R E T    K E Y S    M E N U |"
iskz="----------------------------------------------------"
echo_c "$iskx"
echo_c "$isky"
echo_c "$iskz"; }

encryptmenu (){
clear
emx="----------------------------------"
emy="| E N C R Y P T I O N    M E N U |"
emz="----------------------------------"
echo_c "$emx"
echo_c "$emy"
echo_c "$emz"; }

decryptmenu (){
clear
dmx="----------------------------------"
dmy="| D E C R Y P T I O N    M E N U |"
dmz="----------------------------------"
echo_c "$dmx"
echo_c "$dmy"
echo_c "$dmz"; }

clearsignmenu (){
clear
echo_c "-------------------------------"
echo_c "| C L E A R S I G N   M E N U |"
echo_c "-------------------------------"; }

mainbtcmenu (){
clear
echo_c "--------------------------------------------------"
echo_c "| B I T C O I N    M A N A G E M E N T   M E N U |"
echo_c "--------------------------------------------------"; }

addrmanagemenu(){
clear
echo_c "---------------------------------------------------"
echo_c "| A D D R E S S    M A N A G E M E N T    M E N U |"
echo_c "---------------------------------------------------";}

standaddrmenu (){
clear
echo_c "-----------------------------------------------"
echo_c "| S T A N D A R D    A D D R E S S    M E N U |"
echo_c "-----------------------------------------------"; }

eleaddrmenu (){
clear
echo_c "-----------------------------------------------"
echo_c "| E L E C T R U M    A D D R E S S    M E N U |"
echo_c "-----------------------------------------------"; }

bipaddrmenu (){
clear
echo_c "-----------------------------------------"
echo_c "| B I P 3 2    A D D R E S S    M E N U |"
echo_c "-----------------------------------------"; }

multisigmenu (){
clear
echo_c "-----------------------------------------------"
echo_c "| M U L T I S I G    A D D R E S S    M E N U |"
echo_c "-----------------------------------------------"; }

bcimenu (){
clear
echo_c "-----------------------------------------------------------"
echo_c "| B L O C K C H A I N    I N T E R A C T I O N    M E N U |"
echo_c "-----------------------------------------------------------"; }


#########################
########## END ##########
