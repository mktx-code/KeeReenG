#####################
##### FIRST RUN #####
#####################
#
firstrun ()
{
echo "Generating gpg key-pair. Please answer the questions."
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --gen-key
chown -R "$USER" gpg-KeyRNG/
chown -R "$USER" gpg-KeyRNG/*
chmod -R 0600 gpg-KeyRNG/gpg.conf
}
###################
##### QUITING #####
###################
badquit ()
{
BAD_BTC=$(ls btc-KeyRNG/ | grep -c "addr")
BAD_SEED=$(ls btc-KeyRNG/ | grep -c "seed")
if [[ "$BAD_BTC" -gt "0" || "$BAD_SEED" -gt "0" ]]; then
    clear
    echo -e "\nIF YOU QUIT LIKE THIS YOU ARE LEAVING BITCOIN SEEDS/PRIVATE KEYS UNENCRYPTED!"
    echo -e "\nI suggest quitting by using the "LOCK UP!" option on any menu."
    echo "Do you still want to quit now? (Y/no)"
    read RLYQUIT
    if [ "$RLYQUIT" = "Y" ]; then
        echo "Will you at least encrypt the btc address and seed files with a password? (y/no)"
        read ENC
        if [[ "$ENC" != "no" ]]; then
            tar -c btc-KeyRNG/ > btc.tar.gz
            gpg --quiet --ouput btc.tar.gz.gpg --symmetric --cipher-algo aes256 btc.tar.gz
            rm -rf btc-KeyRNG/
            exit 0
        else
            exit 0
        fi
    fi
else
    exit 0
fi
}
#########################
##### SECURE-DELETE #####
#########################
#
secdelete ()
{
HAS_SRM=$(ls /usr/bin/ /usr/sbin/ /usr/local/bin/ | grep -c srm)
if [[ "$HAS_SRM" -gt "0" ]]; then
    srm -d -r -v "$DEL"
else
    shred -v -u -z "$DEL"
fi
}
#
###########################
##### LOCK AND UNLOCK #####
###########################
#
#-----------
## LOCKUP ##
#-----------
lockup ()
{
read -s -p "Enter Password: " PW
PW=$(echo -n "$PW" | shasum -t -a 512 | cut -b -128)
echo ""
read -s -p "Once more:" CHKPW
CHKPW=$(echo -n "$CHKPW" | shasum -t -a 512 | cut -b -128)
if [[ "$PW" = "$CHKPW" ]]; then
    rm -rf checksum; touch checksum
    cat keyrng | shasum -t -a 512 | cut -b 128 > checksum
    tar -c *-KeyRNG/ pybtctools/ libkeyrng > KeyRNG.tar.gz
    gpg --quiet --output KeyRNG.gpg --passphrase "$PW" --no-use-agent --cipher-algo aes256 --symmetric KeyRNG.tar.gz
    gpg --quiet --passphrase "$PW" --no-use-agent --cipher-algo aes256 --symmetric checksum
    echo "Cleaning temp files..."
    HAS_SRM=$(ls /usr/bin/ /usr/sbin/ /usr/local/bin/ /home/"$USER"/bin/ | grep -c srm)
    if [[ "$HAS_SRM" -gt "0" ]]; then
        srm -drv btc-KeyRNG/*.seed btc-KeyRNG/*.addr temp/ checksum *-KeyRNG/ *.tar.gz
        rm -rf libkeyrng pybtctools
    else
        find btc-KeyRNG/ -depth -type f -exec shred -u -z {} \;
        find *-KeyRNG -depth -type f -exec shred -u -z {} \;
        find temp/ -depth -type f -exec shred -u -z {} \;
        shred -vuz *.tar.gz checksum
        rm -rf temp/ *-KeyRNG/ libkeyrng pybtctools/
    fi
    exit 0
else
    echo -e "\nPASSWORDS DIDN'T MATCH! NOT ENCRYPTING!"
    break
fi
}
#-----------------
## FAST LOCKUP  ##
#-----------------
fastlockup ()
{
read -s -p "Enter Password: " PW
PW=$(echo -n "$PW" | shasum -t -a 512 | cut -b -128)
echo ""
read -s -p "Once more:" CHKPW
CHKPW=$(echo -n "$CHKPW" | shasum -t -a 512 | cut -b -128)
if [[ "$PW" = "$CHKPW" ]]; then
    rm -rf checksum
    touch checksum
    chmod 0600 checksum
    cat keyrng | shasum -t -a 512 | cut -b -128 > checksum
    tar -c btc-KeyRNG/ gpg-KeyRNG/ pybtctools/ libkeyrng > KeyRNG.tar.gz
    gpg --output KeyRNG.gpg --quiet --passphrase "$PW" --no-use-agent --cipher-algo aes256 --symmetric KeyRNG.tar.gz
    gpg --quiet --passphrase "$PW" --no-use-agent --cipher-algo aes256 --symmetric checksum
    rm -rf *-KeyRNG/ pybtctools/ libkeyrng *.tar.gz temp/ checksum
    exit 0
else
    echo -e "\nPASSWORDS DIDN'T MATCH! NOT ENCRYPTING!"
    break
fi
}
#
##########################
##### KEY MANAGEMENT #####
##########################
#
#---------------------
## GENERATE NEW KEY ##
#---------------------
genkey ()
{
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --gen-key
}
#--------------------------
## LIST FULL KEY DETAILS ##
#--------------------------
listfullkeydetails ()
{
echo "Press enter to see a list of possible recipients by UID."
echo "Use up/down arrows to navigate. Press "q" when your finished."
gpg2 --quiet --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | less
}
#------------------
## LIST KEY UIDS ##
#------------------
listkeyuids ()
{
echo "Press enter to see a list of possible recipients by UID."
echo "Use up/down arrows to navigate. Press "q" when your finished."
read
gpg2 --quiet --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
}
#---------------------------------
## LIST FULL SECRET KEY DETAILS ##
#---------------------------------
listfullseckey ()
{
echo "Press enter to see a list of possible recipients by UID."
echo "Use up/down arrows to navigate. Press "q" when your finished."
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-secret-keys | less
}
#-------------------------
## LIST SECRET KEY UIDS ##
#-------------------------
listseckeyuid ()
{
echo "Press enter to see a list of possible recipients by UID."
echo "Use up/down arrows to navigate. Press "q" when your finished."
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-secret-keys | grep "uid" | cut -b 21- | less
}
#-------------------------
## IMPORT KEY FROM FILE ##
#-------------------------
importkeyfile ()
{
echo "What file to import to KeyRNG?"
read $IMPORT_KEYFILE
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --import "$IMPORT_KEYFILE"
}
#------------------------------
## IMPORT KEY FROM CLIPBOARD ##
#------------------------------
importkeyclip ()
{
echo "Press enter when you are ready to paste key to import."
read
rm -rf temp/temp
nano temp/temp
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --import temp/temp
echo "Shredding temp file..."
DEL=temp/temp
secdelete
}
#--------------------------------
## IMPORT KEY FROM ANOTHER GPG ##
#--------------------------------
importkeyfromgpg ()
{
echo "From defualt /home/"$USER"/.gnupg file? (y/no)"
read IS_DEFAULT_GPG
  if [[ "$DEFAULT_GPG" = "no" ]]; then
      echo "Please give the full path to the gnupg file:"
      read DEFAULT_GPG
  else
      DEFAULT_GPG=/home/"$USER"/.gnupg/
  fi
echo "List keys from "$DEFAULT_GPG"? (y/no)"
read LIST_KEYS
  if [ "$LIST_KEYS" != "no" ]; then
      echo "Press enter to see a list of possible recipients by UID."
      echo "Use up/down arrows to navigate. Press "q" when finished."
      read
      gpg2 --homedir "$DEFAULT_GPG" --list-keys --keyid-format 0xlong | less
  fi
echo "What key UID do you want to import to KeyRNG?"
read IMPORT_KEY
gpg2 --homedir "$DEFAULT_GPG" --export "$IMPORT_KEY" | gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --import -
}
#--------------------------------------------
## IMPORT ALL PUBLIC KEYS FROM ANOTHER GPG ##
#--------------------------------------------
gpgimportallpub ()
{
echo "Import all public keys from default location (/home/"$USER"/.gnupg/)? (y/no)"
read DEFAULT
if [[ "$DEFAULT" != "no" ]]; then
    GPG=/home/"$USER"/.gnupg/
    
else
    echo "Give the path and folder name."
    read GPG
fi
rm -rf temp/temp
gpg2 --homedir $(echo "$GPG") --no-permission-warning --list-keys --keyid-format 0xlong | grep "0x" | cut -b 13- | cut -b -19 > temp/temp
LINES=$(grep -c "0x" temp/temp)
if [ "$LINES" -gt "0" ]; then
    cat temp/temp | xargs -I{} -d"\n" gpg2 --no-permission-warning --homedir $(echo "$GPG") --export {} | gpg2 --no-permission-warning --homedir gpg-KeyRNG/ --import
fi
echo "Shredding temp file..."
DEL=temp/temp
secdelete
}
#---------------------------------------
## IMPORT SECRET KEY FROM ANOTHER GPG ##
#---------------------------------------
importseckeyfromgpg ()
{
echo "From defualt /home/"$USER"/.gnupg file? (y/no)"
read IS_DEFAULT_GPG
  if [[ "$DEFAULT_GPG" = "no" ]]; then
      echo "Please give the full path to the gnupg file:"
      read DEFAULT_GPG
  else
      DEFAULT_GPG=/home/"$USER"/.gnupg/
  fi
echo "List keys from "$DEFAULT_GPG"? (y/no)"
read LIST_KEYS
  if [ "$LIST_KEYS" != "no" ]; then
      echo "Press enter to see a list of possible recipients by UID."
      echo "Use up/down arrows to navigate. Press "q" when finished."
      read
      gpg2 --homedir "$DEFAULT_GPG" --list-secret-keys --keyid-format 0xlong | less
  fi
echo "What key UID do you want to import to KeyRNG?"
read IMPORT_KEY
gpg2 --homedir "$DEFAULT_GPG" --export "$IMPORT_KEY" | gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --import
}
#---------------------------------------------
## IMPORT ALL PRIVATE KEYS FROM ANOTHER GPG ##
#---------------------------------------------
gpgimportallsec ()
{
echo "Import all secret keys from default location (/home/"$USER"/.gnupg/)? (y/no)"
read DEFAULT
if [[ "$DEFAULT" != "no" ]]; then
    GPG=/home/"$USER"/.gnupg/
else
    echo "Give path to GnuPG folder to import all secret keys from."
    read GPG
fi
rm -rf temp/temp
gpg2 --homedir "$GPG" --no-permission-warning --list-secret-keys --keyid-format 0xlong | grep "0x" | cut -b 13- | cut -b -19 > temp/temp
LINES=$(grep -c "0x" temp/temp)
if [ "$LINES" -gt "0" ]; then
    cat temp/temp | xargs -I{} -d"\n" gpg2 --no-permission-warning --homedir "$GPG" --export-secret-keys {} | gpg2 --no-permission-warning --homedir gpg-KeyRNG/ --import
fi
echo "Shredding temp file..."
DEL=temp/temp
secdelete
}
#----------------------
## EXPORT PUBLIC KEY ##
#----------------------
exportpubkey ()
{
echo "Press enter to see a list of your public keys. Press "q" when finished."
read
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
echo "Enter the UID you would like to export."
read EXPORT_UID
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --export "$EXPORT_UID"
}
#------------------------------
## EXPORT PUBLIC KEY TO FILE ##
#------------------------------
exportpubkeyfile ()
{
echo "Press enter to see a list of your public keys. Press "q" when finished."
read
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
echo "Enter the UID you would like to export."
read EXPORT_UID
echo "What file to write to?"
read PUBKEY_FILE
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --output "$PUBKEY_FILE" --export "$EXPORT_UID"
}
#----------------------
## EXPORT SECRET KEY ##
#----------------------
exportseckey ()
{
echo "Press enter to see a list of your secret keys. Press "q" when finished."
read
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-secret-keys | grep "uid" | cut -b 21- | less
echo "Enter the UID you would like to export."
read EXPORT_SECRET_UID
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --export "$EXPORT_SECRET_UID"
}
#------------------------------
## EXPORT SECRET KEY TO FILE ##
#------------------------------
exportseckeyfile ()
{
echo "Press enter to see a list of your public keys. Press "q" when finished."
read
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-secret-keys | grep "uid" | cut -b 21- | less
echo "Enter the UID you would like to export."
read EXPORT_SECRET_UID
echo "What file to write to?"
read SECKEY_FILE
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --output "$SECKEY_FILE" --export "$EXPORT_SECRET_UID"
}
#
## WRITE FUNC TO CHECK FOR TAILS/TOR ##
#

#---------------------------
## SEND KEYS TO KEYSERVER ##
#---------------------------
sendkeyserv ()
{
echo "Copy the key ID starting with "0x...", press "q" when finished."
echo "Press enter to see a list of your public keys."
read
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | less
echo "Enter the UID you would like to send to the keyserver."
read SEND_KEYSERV_UID
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --send-keys "$SEND_KEYSERV_UID"
}
#-----------------------------
## RECEIVE KEYS FROM SERVER ##
#-----------------------------
#
recvkeyserv ()
{
echo "Please enter the UID you would like to receive from the keyserver."
read RECV_KEYSERV_UID
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --recv-keys "$RECV_KEYSERV_UID"
}
#####################################
##### ENCRYPTION AND DECRYPTION #####
#####################################
#
#-------------------
## ENCRYPT A FILE ##
#-------------------
encryptfile ()
{
echo "What file?"
read EFILE
echo "Sign message? (Y/no)"
read SIGN
if [ "$SIGN" = "Y" ]; then
    echo "See private keys to sign with? (y/no)"
    read SHOW_PRIV
    if [[ "$SHOW_PRIV" != "no" ]]; then
        echo "Copy the UID you would like to sign with."
        echo "Press enter to see a list of signing keys."
        echo "Use up/down arrows to navigate. Press "q" when your finished."
        read
        gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "sig"
        echo "Paste UID to sign with:"
        read PRIVKEY
    else
        echo "Paste UID to sign with:"
        read PRIVKEY    
    fi
fi
echo "See UIDS of possible recipients? (y/no)"
read SHOW_UIDS
if [ "$SHOW_UIDS" != "no" ]; then
    echo "Press enter to see a list of possible recipients by uid."
    echo "Use up/down arrows to navigate. Press "q" when your finished."
    read
    gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
fi
echo "What recipient?"
read MSG_RECP
echo "Another recipient (yourself possibly)? (y/no)"
read IF_MSG_RECP_TWO
  if [[ "$IF_MSG_RECP_TWO" != "no" ]]; then
      echo "See UID list again? (y/no)"
      read SHOW_UIDS
      if [ "$SHOW_UIDS" != "no" ]; then
          echo "Press enter to see a list of possible recipients by uid."
          echo "Use up/down arrows to navigate. Press "q" when your finished."
          read
          gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
      fi
      echo "Second recipient?"
      read MSG_RECP_TWO
  fi
if [[ "$SIGN" != "Y" ]]; then
  if [[ "$IF_MSG_RECP_TWO" = "no" ]]; then
      gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --recipient "$MSG_RECP" --output temp/newmsg.asc --encrypt "$EFILE"
  else
      echo "Do you want the second recipient hidden? (y/no)"
      read HIDE_RECP_TWO
      if [ "$HIDE_RECP_TWO" != "no" ]; then
          gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --hidden-recipient "$MSG_RECP_TWO" --recipient "$MSG_RECP" --output temp/newmsg.asc --encrypt "$EFILE"
      fi
      gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --recipient "$MSG_RECP" --recipient "$MSG_RECP_TWO" --output temp/newmsg.asc --encrypt "$EFILE"
  fi
else
  if [[ "$IF_MSG_RECP_TWO" = "no" ]]; then
      gpg2 --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --sign --no-permission-warning --armor --recipient "$MSG_RECP" --output temp/newmsg.asc --encrypt "$EFILE"
  else
      echo "Do you want the second recipient hidden? (y/no)"
      read HIDE_RECP_TWO
      if [ "$HIDE_RECP_TWO" != "no" ]; then
          gpg2 --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --sign --no-permission-warning --armor --hidden-recipient "$MSG_RECP_TWO" --recipient "$MSG_RECP" --output temp/newmsg.asc --encrypt "$EFILE"
      fi
      gpg2 --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --sign --no-permission-warning --armor --recipient "$MSG_RECP" --recipient "$MSG_RECP_TWO" --output temp/newmsg.asc --encrypt "$EFILE"
  fi
fi
echo "File is stored temporarily at KeyRNG/temp/newmsg.asc."
echo "Would you like to print it now? (y/no)"
read CAT_EFILE
  if [ "$CAT_EFILE" != "no" ]; then
      cat temp/newmsg.asc
      echo "Destroy now? (y/no)"
      read DESTROY
      if [ "$DESTROY" != "no" ]; then
          DEL=temp/newmsg.asc
          secdelete
      fi
  fi
}
#--------------------------
## ENCRYPT A NEW MESSAGE ##
#--------------------------
encryptnewmsg ()
{
echo "Press enter to type message."
rm -rf temp/newmsg
nano temp/newmsg
echo "Sign message? (Y/no)"
read SIGN
if [ "$SIGN" = "Y" ]; then
    echo "See private keys to sign with? (y/no)"
    read SHOW_PRIV
    if [[ "$SHOW_PRIV" != "no" ]]; then
        echo "Copy the UID you would like to sign with."
        echo "Press enter to see a list of signing keys."
        echo "Use up/down arrows to navigate. Press "q" when your finished."
        read
        gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "sig"
        echo "Give UID to sign with:"
        read PRIVKEY
    else
        echo "Give UID to sign with:"
        read PRIVKEY    
    fi
fi
echo "See UIDS of possible recipients? (y/no)"
read SHOW_UIDS
  if [ "$SHOW_UIDS" != "no" ]; then
      echo "Press enter to see a list of possible recipients by UID."
      echo "Use up/down arrows to navigate. Press "q" when your finished."
      read
      gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
  fi
echo "What recipient?"
read NEWMSG_RECP
echo "Another recipient (yourself possibly)? (y/no)"
read IF_NEWMSG_RECP_TWO
if [ "$IF_NEWMSG_RECP_TWO" != "no" ]; then
    echo "See UID list again? (y/no)"
    read SHOW_UIDS
    if [ "$SHOW_UIDS" != "no" ]; then
        echo "Press enter to see a list of possible recipients by UID."
        echo "Use up/down arrows to navigate. Press "q" when your finished."
        read
        gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-keys | grep "uid" | cut -b 21- | less
    fi
    echo "Second recipient UID?"
    read NEWMSG_RECP_TWO
    echo "Do you want the second recipient hidden? (y/no)"
    read HIDE_RECP_TWO
    if [[ "$SIGN" != "Y" ]]; then
      if [[ "$HIDE_RECP_TWO" != "no" ]]; then
          gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --recipient "$NEWMSG_RECP" --hidden-recipient "$NEWMSG_RECP_TWO" --output temp/newmsg.asc --encrypt temp/newmsg
      else
          gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --recipient "$NEWMSG_RECP" --recipient "$NEWMSG_RECP_TWO" --output temp/newmsg.asc --encrypt temp/newmsg
      fi
    else
      if [[ "$HIDE_RECP_TWO" != "no" ]]; then
          gpg2 --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --sign --no-permission-warning --armor --recipient "$NEWMSG_RECP" --hidden-recipient "$NEWMSG_RECP_TWO" --output temp/newmsg.asc --encrypt temp/newmsg
      else
          gpg2 --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --sign --no-permission-warning --armor --recipient "$NEWMSG_RECP" --recipient "$NEWMSG_RECP_TWO" --output temp/newmsg.asc --encrypt temp/newmsg
      fi  
    fi
else
  if [[ "$SIGN" != "Y" ]]; then
      gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --armor --recipient "$NEWMSG_RECP" --output temp/newmsg.asc --encrypt temp/newmsg
  else
      gpg2 --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --sign --no-permission-warning --armor --recipient "$NEWMSG_RECP" --output temp/newmsg.asc --encrypt temp/newmsg
  fi
fi
echo "File is stored temporarily at KeyRNG/temp/newmsg.asc"
echo "Would you like to destroy the original, unencrypted message? (y/no)"
read DESTROY
  if [ "$DESTROY" != "no" ]; then
      echo "Shredding temp file..."
      DEL=temp/newmsg
      secdelete
  fi
echo "Would you like to print it now? (y/no)"
read CAT_EFILE
  if [ "$CAT_EFILE" != "no" ]; then
      cat temp/newmsg.asc
      echo "Destroy now? (y/no)"
      read DESTROY
      if [ "$DESTROY" != "no" ]; then
          DEL=temp/newmsg.asc
          secdelete
      fi
  fi
}
#-----------------
## DECRYPT FILE ##
#-----------------
decryptfile ()
{
echo "Which file?"
read DFILE
echo "Is this encrypted to a hidden UID? (y/no)"
read IS_HIDDEN_UID
  if [[ "$IS_HIDDEN_UID" != "no" ]]; then
      echo "Do you know the UID it is encrypted to? (y/no)"
      read KNOW_UID
        if [[ "$KNOW_UID" = "no" ]]; then
            echo "Press enter to try all secret keys."
            read
            rm -rf temp/newmsg
            gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --try-all-secrets --output temp/newmsg --decrypt "$DFILE"
            echo "File is stored temporarily at KeyRNG/temp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when your finished."
                  read
                  cat temp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        DEL=temp/newmsg
                        secdelete
                    fi
              fi
        else
            echo "What UID?"
            read HIDDEN_UID
            gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --local-user "$HIDDEN_ID" --output temp/newmsg --decrypt "$DFILE"
            echo "File is stored temporarily at KeyRNG/temp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when your finished."
                  read
                  cat temp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        DEL=temp/newmsg
                        secdelete
                    fi
              fi
        fi
  else
      gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --local-user "$HIDDEN_ID" --output temp/newmsg --decrypt "$DFILE"   
      echo "File is stored temporarily at KeyRNG/temp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when finished."
                  read
                  cat temp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        DEL=temp/newmsg
                        secdelete
                    fi
              fi 
  fi
}
#---------------------------
## DECRYPT FROM CLIPBOARD ##
#---------------------------
decryptclip ()
{
echo "Press enter when you are ready to paste the message."
read
rm -rf temp/newmsg
nano temp/newmsg
DFILE=temp/newmsg
echo "Is this encrypted to a hidden UID? (y/no)"
read IS_HIDDEN_UID
  if [[ "$IS_HIDDEN_UID" != "no" ]]; then
      echo "Do you know the UID it is encrypted to? (y/no)"
      read KNOW_UID
        if [[ "$KNOW_UID" = "no" ]]; then
            echo "Press enter to try all secret keys."
            read
            rm -rf temp/newmsg
            gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --try-all-secrets --output temp/newmsg --decrypt "$DFILE"
            echo "File is stored temporarily at KeyRNG/temp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when finished."
                  read
                  cat temp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        DEL=temp/newmsg
                        secdelete
                    fi
              fi
        else
            echo "What UID?"
            read HIDDEN_UID
            gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --local-user "$HIDDEN_ID" --output temp/newmsg --decrypt "$DFILE"
            echo "File is stored temporarily at KeyRNG/temp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when finished."
                  read
                  cat temp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        DEL=temp/newmsg
                        secdelete
                    fi
              fi
        fi
  else
      gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --local-user "$HIDDEN_ID" --output temp/newmsg --decrypt "$DFILE"   
      echo "File is stored temporarily at KeyRNG/temp/newmsg."
            echo "Do you want to print it now? (y/no)"
            read PRINT_NOW
              if [ "$PRINT_NOW" != "no" ]; then
                  echo "Press enter to see message."
                  echo "Use up/down arrows to navigate. Press "q" when finished."
                  read
                  cat temp/newmsg | less
                  echo "Destroy message now? (y/no)"
                  read DESTROY
                    if [ "$DESTROY" != "no" ]; then
                        echo "Shredding temp file..."
                        DEL=temp/newmsg
                        secdelete
                    fi
              fi 
  fi
}
#-----------------------------
## GPG CLEARSIGN FROM FILE ##
#-----------------------------
csignfile ()
{
echo "File to sign:"
read FILE
echo "See private keys to sign with? (y/no)"
read SEE
  if [ "$SEE" != "no" ]; then
      echo "Copy the UID you would like to sign with."
      echo "Press enter to see a list of possible recipients by uid."
      echo "Use up/down arrows to navigate. Press "q" when finished."
      read
      gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-secret-keys | grep "uid" | cut -b 21- | less
  fi
echo "Give UID to sign with:"
read PRIVKEY
gpg2 --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --no-permission-warning --armor --output "$FILE".asc --clearsign "$FILE"
echo "Signed file is stored at "$FILE".asc."
echo "Do you want to copy the file to another location? (Y/no)"
read COPY
if [ "$COPY" = "Y" ]; then
  echo "Path to copy to:"
  read CPATH
  cp "$FILE".asc "$CPATH"
fi
echo "Show the signed document here? (Y/no)"
read SHOW
  if [ "$SHOW" = "Y" ]; then
      cat "$FILE".asc
  fi
}
#------------------------------
## GPG CLEARSIGN NEW MESSAGE ##
#------------------------------
csignnew ()
{
echo "Press enter to type new message to clearsign."
read
rm -rf temp/newmsg
nano temp/newmsg
FILE=temp/newmsg
echo "See private keys to sign with? (y/no)"
read SEE
  if [ "$SEE" != "no" ]; then
      echo "Copy the UID you would like to sign with."
      echo "Press enter to see a list of possible recipients by uid."
      echo "Use up/down arrows to navigate. Press "q" when finished."
      read
      gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --list-secret-keys | grep "uid" | cut -b 21- | less
  fi
echo "Give UID to sign with:"
read PRIVKEY
gpg2 --homedir gpg-KeyRNG/ --local-user "$PRIVKEY" --no-permission-warning --armor --output "$FILE".asc --clearsign "$FILE"
echo "Signed file is stored at "$FILE".asc."
echo "This file will be deleted when you do the LOCK UP! option."
echo "Do you want to copy the file to another location? (Y/no)"
read COPY
if [ "$COPY" = "Y" ]; then
  echo "Path to copy to:"
  read CPATH
  cp "$FILE".asc "$CPATH"
fi
echo "Show the signed document here? (Y/no)"
read SHOW
  if [ "$SHOW" = "Y" ]; then
      cat "$FILE".asc
  fi
}
#------------------------------
## GPG VERIFY FILE SIGNATURE ##
#------------------------------
gpgfileverify ()
{
echo "Which file to verify?"
read FILE
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --verify "$FILE"
}
#------------------------------------
## GPG VERIFY CLIPBOARD SIGNATURE  ##
#------------------------------------
gpgclipverify ()
{
echo "Press enter to paste GPG clearsigned message."
read
rm -rf temp/newmsg
nano temp/newmsg
FILE=temp/newmsg
gpg2 --homedir gpg-KeyRNG/ --no-permission-warning --verify "$FILE"
}
#################################
##### GENERAL BTC FUNCTIONS #####
#################################
#--------------------------------------------------------------------------------
## BITCOIN SIGN MESSAGE ## ONLY WORKS FOR SIGNING ONE LINE MESSAGES CURRENTLY. ##
#--------------------------------------------------------------------------------
btcsign ()
{
echo "Type the message you would like to sign."
echo "Press enter when finished."
read MSG
echo "See a list of your addresses and private keys to sign with? (y/no)"
read SEE
if [ "$SEE" != "no" ]; then
    echo "Press enter to see addresses and private keys."
    echo "Please copy the private key you would like to sign with."
    echo "Use up/down arrows to navigate. Press "q" when finished."
    read
    cat btc-KeyRNG/*.addr | grep ":" | less
fi
echo "Paste privkey"
read PRIVKEY
SIG=$(pybtctools/pybtctool ecdsa_sign "$MSG" "$PRIVKEY")
echo -e "-----BEGIN BITCOIN SIGNED MESSAGE-----\n" > temp/btcmsg
echo -n ""$MSG"\n" >> temp/btcmsg
echo -e "\n-----BEGIN BITCOIN SIGNATURE-----\n" >> temp/btcmsg
echo -n "$SIG" >> temp/btcmsg
echo -e "\n\n-----END BITCOIN SIGNATURE-----" >> temp/btcmsg
echo "\nMessage and signature are temporarily save at KeyRNG/temp/btcmsg."
echo "Press enter to see signed message."
read
cat temp/btcmsg
echo "Destroy message now? (Y/no)"
read DESTROY
if [ "$DESTROY" = "Y" ]; then
    DEL=temp/btcmsg
    secdelete
fi
clear
echo "Press enter to go back to BITCOIN MENU."
read
}
#-----------------------------------------------------------------------------------------------------------------------------------------
## GET ADDRESS BALANCE ## WORKS, BUT RELIES ON THIRD PARTIES. NORMAL TORIFICATIONS DON'T WORK, AND I CAN'T GUARANTEE PRIVOXY IS PRESENT ##
#-----------------------------------------------------------------------------------------------------------------------------------------
#addrbalance ()
#{
#echo "Show list of your addresses? (y/no)"
#read SHOW
#if [ "$SHOW" != "no" ]; then
#    echo "Press enter to see addresses."
#    echo "Use up/down arrows to navigate. Press "q" when finished."
#    read
#    cat btc-KeyRNG/standard.addr | grep "Address" | less
#fi
#echo "Put address to check the balance of:"
#read ADDR
#pybtctools/pybtctool bci_unspent "$ADDR"
#}
#-----------------------------------------------------------------------------------------------------------------------------------------
## GET ADDRESS HISTORY ## WORKS, BUT RELIES ON THIRD PARTIES. NORMAL TORIFICATIONS DON'T WORK, AND I CAN'T GUARANTEE PRIVOXY IS PRESENT ##
#-----------------------------------------------------------------------------------------------------------------------------------------
#addrhistory ()
#{
#echo "Show list of your addresses? (y/no)"
#read SHOW
#if [ "$SHOW" != "no" ]; then
#    echo "Press enter to see addresses."
#    echo "Use up/down arrows to navigate. Press "q" when finished."
#    read
#    cat btc-KeyRNG/standard.addr | grep "Address" | less
#fi
#echo "Put address to check the history of:"
#read ADDR
#pybtctools/pybtctool history "$ADDR"
#}
###########################################
##### STANDARD BTC ADDRESS MANAGEMENT #####
###########################################
#----------------
## NEW ADDRESS ##
#----------------
getnewaddress ()
{
HAS_ADDRFILE=$(ls btc-KeyRNG/ | grep -c "standard")
if [ "$HAS_ADDRFILE" = "0" ]; then
    touch btc-KeyRNG/standard.addr
    chown -R "$USER" btc-KeyRNG/standard.addr
    chmod 0600 btc-KeyRNG/standard.addr
    echo "---------------------------------------" > btc-KeyRNG/standard.addr
    echo "| S T A N D A R D   A D D R E S S E S |" >> btc-KeyRNG/standard.addr
    echo "---------------------------------------" >> btc-KeyRNG/standard.addr
fi
PRIVKEY=$(pybtctools/pybtctool random_key)
WIF_COMP=$(pybtctools/pybtctool encode_privkey $(echo -n "$PRIVKEY") wif_compressed)
PUBKEY=$(pybtctools/pybtctool privtopub $(echo -n "$WIF_COMP"))
ADDRESS=$(pybtctools/pybtctool pubkey_to_address $(echo -n "$PUBKEY"))
NUM_PRIV=$(grep -c "Privkey" btc-KeyRNG/standard.addr)
if [[ "$NUM_PRIV" = "0" ]]; then
    echo -e "\n\nStnadard Address 1: "$ADDRESS"\nStnadard Pubkey 1:  "$PUBKEY"\nStnadard Privkey 1 (wif compressed):  "$WIF_COMP"\n\n---"
    echo "Add to backup file: btc-KeyRNG/standard.addr? (y/no)"
    read BACKUPKEY
    if [ "$BACKUPKEY" != "no" ]; then
        echo "Add a note to address? (y/no)"
        read IS_NOTE
        if [[ "$IS_NOTE" = "y" ]]; then
            echo "Type the note and press enter:"
            read NOTE 
            echo -e "\n\nStandard Address 1: "$ADDRESS"     Note: "$NOTE"\nStandard Pubkey 1:  "$PUBKEY"\nStandard Privkey 1 (wif compressed):  "$WIF_COMP"\n\n---" >> btc-KeyRNG/standard.addr
            echo "DONE!"
            sleep 1
            clear
        else
            echo -e "\n\nStandard Address 1: "$ADDRESS"\nStandard Pubkey 1:  "$PUBKEY"\nStandard Privkey 1 (wif compressed):  "$WIF_COMP"\n\n---" >> btc-KeyRNG/standard.addr
            echo "DONE!"
            sleep 1
            clear
        fi
    fi
else
    NUM_PRIV=$(expr "$NUM_PRIV" + 1)
    echo -e "\n\nStnadard Address "$NUM_PRIV": "$ADDRESS"\nStnadard Pubkey "$NUM_PRIV":  "$PUBKEY"\nStnadard Privkey "$NUM_PRIV" (wif compressed):  "$WIF_COMP"\n\n---"
    echo "Add to backup file: btc-KeyRNG/standard.addr? (y/no)"
    read BACKUPKEY
    if [ "$BACKUPKEY" != "no" ]; then
        echo "Add a note to address? (y/no)"
        read IS_NOTE
        if [[ "$IS_NOTE" = "y" ]]; then
            echo "Type the note and press enter:"
            read NOTE 
            echo -e "\n\nStandard Address "$NUM_PRIV": "$ADDRESS"     Note: "$NOTE"\nStandard Pubkey "$NUM_PRIV":  "$PUBKEY"\nStandard Privkey "$NUM_PRIV" (wif compressed):  "$WIF_COMP"\n\n---" >> btc-KeyRNG/standard.addr
            echo "DONE!"
            sleep 1
            clear
        else
            echo -e "\n\nStandard Address "$NUM_PRIV": "$ADDRESS"\nStandard Pubkey "$NUM_PRIV":  "$PUBKEY"\nStandard Privkey "$NUM_PRIV" (wif compressed):  "$WIF_COMP"\n\n---" >> btc-KeyRNG/standard.addr
            echo "DONE!"
            sleep 1
            clear
        fi
    fi 
fi
}
#--------------------------------
## SHOW ALL STANDARD ADDRESSES ##
#--------------------------------
showaddr ()
{
echo "Press enter to see addresses."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/standard.addr | grep "Address" | less
}
#-----------------------------------------
## SHOW STANDARD ADDRESSES AND PRIVKEYS ##
#-----------------------------------------
showalladdr ()
{
echo "Press enter to see addresses and private keys."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/standard.addr | less
}
############################################
##### ELECTRUM SEED ADDRESS MANAGEMENT #####
############################################
#----------------------
## CHECK/CREATE SEED ##
#----------------------
checkeleseed ()
{
HAS_SEEDFILE=$(ls btc-KeyRNG/ | grep -c "ele.seed")
if [[ "$HAS_SEEDFILE" -lt "1" ]]; then
    touch btc-KeyRNG/ele.seed
    chown "$USER" btc-KeyRNG/ele.seed
    chmod 0600 btc-KeyRNG/ele.seed
    newelectrumseed
    clear
    echo "THIS IS YOUR PRIVATE SEED TO RESTORE PRIVATE KEYS."
    echo "WRITE IT DOWN SOMEWHERE SAFE AS A BACKUP!"
    echo "WHILE KeyRNG IS UNLOCKED THE SEED IS STORED DECRYPTED AT KeyRNG/btc-KeyRNG/bip.seed"
    echo -ne "\n"$SEED"\n"
    echo -e "--------------------------------\n"
    echo -e "\nPress enter when you have your seed backed up."
    read
else
    EMPTY=$(cat btc-KeyRNG/ele.seed | grep -c "")
    if [ "$EMPTY" -lt "1" ]; then
        chown "$USER" btc-KeyRNG/ele.seed
        chmod 0600 btc-KeyRNG/ele.seed
        newelectrumseed
        echo "THIS IS YOUR PRIVATE SEED TO RESTORE PRIVATE KEYS."
        echo "WRITE IT DOWN SOMEWHERE SAFE AS A BACKUP!"
        echo "WHILE KeyRNG IS UNLOCKED THE SEED IS STORED DECRYPTED AT KeyRNG/btc-KeyRNG/bip.seed"
        echo -ne "\n"$SEED"\n"
        echo -e "--------------------------------\n"
        echo -e "\nPress enter when you have your seed backed up."
        read
    fi
fi
clear
}
#-------------------------
## ELECTRUM CREATE SEED ##
#-------------------------
newelectrumseed ()
{
SEED=$(pybtctools/pybtctool random_electrum_seed)
echo -n ""$SEED"" > btc-KeyRNG/ele.seed
}
#-------------------------
## NEW ELECTRUM ADDRESS ##
#-------------------------
elecreateaddr ()
{
SEED=$(cat btc-KeyRNG/ele.seed)
HAS_ADDRFILE=$(ls btc-KeyRNG/ | grep -c "ele.addr")
if [ "$HAS_ADDRFILE" -lt "1" ]; then
    touch btc-KeyRNG/ele.addr
    chown -R "$USER" btc-KeyRNG/
    chmod 0600 btc-KeyRNG/ele.addr
    echo "----------------------------------------" > btc-KeyRNG/ele.addr
    echo "| E L E C T R U M    A D D R E S S E S |" >> btc-KeyRNG/ele.addr
    echo "----------------------------------------" >> btc-KeyRNG/ele.addr
    echo -e "\n\n-----------------------------------------\n|Seed| "$SEED" |\n-----------------------------------------" >> btc-KeyRNG/ele.addr
    MPK=$(pybtctools/pybtctool electrum_mpk $(echo -n "$SEED"))
    echo -e "\n\nMaster Public Key:  "$MPK"" >> btc-KeyRNG/ele.addr
fi
ADDR_COUNT=$(cat btc-KeyRNG/ele.addr | grep -c "Pubkey")
if [[ "$ADDR_COUNT" = "0" ]]; then
    WIF_COMP=$(pybtctools/pybtctool electrum_privkey $(echo -n "$SEED") 0 wif_compressed)
    PUB=$(pybtctools/pybtctool privtopub $(echo -n "$WIF_COMP"))
    ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$PUB"))
    echo -e "\n\nEle Address 1: "$ADDR"\nEle Pubkey 1:  "$PUB"\nEle Privkey 1 (wif compressed):  "$WIF_COMP"\n\n---"
    echo "Add to backup file: btc-KeyRNG/ele.addr? (y/no)"
    read BACKUPKEY
    if [ "$BACKUPKEY" != "no" ]; then
        echo "Add a note to address? (y/no)"
        read IS_NOTE
        if [[ "$IS_NOTE" = "y" ]]; then
            echo "Type the note and press enter:"
            read NOTE 
            echo -e "\nEle Address 1: "$ADDR"     Note: "$NOTE"\nEle Pubkey 1:  "$PUB"\nEle Privkey 1 (wif compressed):  "$WIF_COMP"\n\n---" >> btc-KeyRNG/ele.addr
            echo "DONE!"
            sleep 1
            clear
        else
            echo -e "\n\nEle Address 1: "$ADDR"\nEle Pubkey 1:  "$PUB"\nEle Privkey 1 (wif compressed):  "$WIF_COMP"\n\n---" >> btc-KeyRNG/ele.addr
            echo "DONE!"
            sleep 1
            clear
        fi
    fi
else
    ADDR_COUNT=$(expr "$ADDR_COUNT" + 1)
    WIF_COMP=$(pybtctools/pybtctool electrum_privkey $(echo -n "$SEED") $(echo -n "$ADDR_COUNT") wif_compressed)
    PUB=$(pybtctools/pybtctool privtopub $(echo -n "$WIF_COMP"))
    ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$PUB"))
    echo -e "\n\nEle Address "$ADDR_COUNT": "$ADDR"\nEle Pubkey "$ADDR_COUNT":  "$PUB"\nEle Privkey "$ADDR_COUNT" (wif compressed):  "$WIF_COMP"\n\n---"
    echo "Add to backup file: btc-KeyRNG/ele.addr? (y/no)"
    read BACKUPKEY
    if [ "$BACKUPKEY" != "no" ]; then
        echo "Add a note to address? (y/no)"
        read IS_NOTE
        if [[ "$IS_NOTE" = "y" ]]; then
            echo "Type the note and press enter:"
            read NOTE 
            echo -e "\n\nEle Address "$ADDR_COUNT": "$ADDR"     Note: "$NOTE"\nEle Pubkey "$ADDR_COUNT":  "$PUB"\nEle Privkey "$ADDR_COUNT" (wif compressed):  "$WIF_COMP"\n\n---" >> btc-KeyRNG/ele.addr
            echo "DONE!"
            sleep 1
            clear
        else
            echo -e "\n\nEle Address "$ADDR_COUNT": "$ADDR"\nEle Pubkey "$ADDR_COUNT":  "$PUB"\nEle Privkey "$ADDR_COUNT" (wif compressed):  "$WIF_COMP"\n\n---" >> btc-KeyRNG/ele.addr
            echo "DONE!"
            sleep 1
            clear
        fi
    fi
fi
}
#---------------------------------
## SHOW ELECTRUM ADDRESSES ONLY ##
#---------------------------------
eleshowaddr ()
{
echo "Press enter to see addresses."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/ele.addr | grep "Address" | less
}
#------------------------------------
## SHOW ELECTRUM ADDR AND PRIVKEYS ##
#------------------------------------
eleshowall ()
{
echo "Press enter to see addresses and private keys."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/ele.addr | less
}
########################################
##### BIP32 SEED ADDRESS FUNCTIONS #####
########################################
#----------------------
## CHECK/CREATE SEED ##
#----------------------
checkbipseed ()
{
HAS_SEEDFILE=$(ls btc-KeyRNG/ | grep -c "bip.seed")
if [[ "$HAS_SEEDFILE" -lt "1" ]]; then
    touch btc-KeyRNG/bip.seed
    chown "$USER" btc-KeyRNG/bip.seed
    chmod 0600 btc-KeyRNG/bip.seed
    newbipseed
    clear
    echo "THIS IS YOUR PRIVATE BIP32 SEED TO RESTORE PRIVATE KEYS."
    echo "WRITE IT DOWN SOMEWHERE SAFE AS A BACKUP!"
    echo "WHILE KeyRNG IS UNLOCKED THE SEED IS STORED DECRYPTED AT KeyRNG/btc-KeyRNG/bip.seed"
    echo -ne "\n"$SEED"\n"
    echo -e "\nPress enter when you have your seed backed up."
    read
else
    EMPTY=$(cat btc-KeyRNG/bip.seed | grep -c "")
    if [ "$EMPTY" -lt "1" ]; then
        chown "$USER" btc-KeyRNG/bip.seed
        chmod 0600 btc-KeyRNG/bip.seed
        newbipseed
        echo "THIS IS YOUR PRIVATE BIP32 SEED TO RESTORE PRIVATE KEYS."
        echo "WRITE IT DOWN SOMEWHERE SAFE AS A BACKUP!"
        echo "WHILE KeyRNG IS UNLOCKED THE SEED IS STORED DECRYPTED AT KeyRNG/btc-KeyRNG/bip.seed"
        echo -ne "\n"$SEED"\n"
        echo -e "\nPress enter when you have your seed backed up."
        read
    fi
fi
clear
}
#----------------------
## BIP32 CREATE SEED ##
#----------------------
newbipseed ()
{
SEED=$(pybtctools/pybtctool random_electrum_seed | pybtctools/pybtctool -s slowsha | pybtctools/pybtctool -s changebase 16 256 | pybtctools/pybtctool -b changebase 256 16 | pybtctools/pybtctool -s bip32_master_key)
echo -en ""$SEED"" > btc-KeyRNG/bip.seed
}
#-----------------------------
## BIP32 CREATE NEW ADDRESS ##
#-----------------------------
bipcreateaddr ()
{
SEED=$(cat btc-KeyRNG/bip.seed)
HAS_ADDRFILE=$(ls btc-KeyRNG/ | grep -c "bip.addr")
if [ "$HAS_ADDRFILE" -lt "1" ]; then
    touch btc-KeyRNG/bip.addr
    chown -R "$USER" btc-KeyRNG/
    chmod 0600 btc-KeyRNG/bip.addr
    echo "----------------------------------" > btc-KeyRNG/bip.addr
    echo "| B I P 3 2    A D D R E S S E S |" >> btc-KeyRNG/bip.addr
    echo "----------------------------------" >> btc-KeyRNG/bip.addr
    echo -e "\n\n------------------------------------------------------------------------------------------------------------------------\n|Seed| "$SEED" |\n------------------------------------------------------------------------------------------------------------------------" >> btc-KeyRNG/bip.addr
fi
ADDR_COUNT=$(cat btc-KeyRNG/bip.addr | grep -c "Pubkey")
if [[ "$ADDR_COUNT" = "0" ]]; then
    XPRIV=$(pybtctools/pybtctool bip32_ckd $(echo -n "$SEED") 0)
    XPUB=$(pybtctools/pybtctool bip32_privtopub $(echo -n "$XPRIV"))
    ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$XPUB"))
    echo -e "\n\nBIP32 Address 1: "$ADDR"\nBIP32 Pubkey 1:  "$XPUB"\nBIP32 Privkey 1:  "$XPRIV"\n\n---"
    echo "Add to backup file: btc-KeyRNG/bip.addr? (y/no)"
    read BACKUPKEY
    if [ "$BACKUPKEY" != "no" ]; then
        echo "Add a note to address? (y/no)"
        read IS_NOTE
        if [[ "$IS_NOTE" = "y" ]]; then
            echo "Type the note and press enter:"
            read NOTE 
            echo -e "\nBIP32 Address 1: "$ADDR"     Note: "$NOTE"\nBIP32 Pubkey 1:  "$XPUB"\nBIP32 Privkey 1:  "$XPRIV"\n\n---" >> btc-KeyRNG/bip.addr
            echo "DONE!"
            sleep 1
            clear
        else
            echo -e "\n\nBIP32 Address 1: "$ADDR"\nBIP32 Pubkey 1:  "$XPUB"\nBIP32 Privkey 1:  "$XPRIV"\n\n---" >> btc-KeyRNG/bip.addr
            echo "DONE!"
            sleep 1
            clear
        fi
    fi
else
    ADDR_COUNT=$(expr "$ADDR_COUNT" + 1)
    XPRIV=$(pybtctools/pybtctool bip32_ckd $(echo -n "$SEED") $(echo -n "$ADDR_COUNT"))
    XPUB=$(pybtctools/pybtctool bip32_privtopub $(echo -n "$XPRIV"))
    ADDR=$(pybtctools/pybtctool pubtoaddr $(echo -n "$XPUB"))
    echo -e "\n\nBIP32 Address "$ADDR_COUNT": "$ADDR"\nBIP32 Pubkey "$ADDR_COUNT":  "$XPUB"\nBIP32 Privkey "$ADDR_COUNT":  "$XPRIV"\n\n---"
    echo "Add to backup file: btc-KeyRNG/bip.addr? (y/no)"
    read BACKUPKEY
    if [ "$BACKUPKEY" != "no" ]; then
        echo "Add a note to address? (y/no)"
        read IS_NOTE
        if [[ "$IS_NOTE" = "y" ]]; then
            echo "Type the note and press enter:"
            read NOTE 
            echo -e "\n\nBIP32 Address "$ADDR_COUNT": "$ADDR"     Note: "$NOTE"\nBIP32 Pubkey "$ADDR_COUNT":  "$XPUB"\nBIP32 Privkey "$ADDR_COUNT":  "$XPRIV"\n\n---" >> btc-KeyRNG/bip.addr
            echo "DONE!"
            sleep 1
            clear
        else
            echo -e "\n\nBIP32 Address "$ADDR_COUNT": "$ADDR"\nBIP32 Pubkey "$ADDR_COUNT":  "$XPUB"\nBIP32 Privkey "$ADDR_COUNT":  "$XPRIV"\n\n---" >> btc-KeyRNG/bip.addr
            echo "DONE!"
            sleep 1
            clear
        fi
    fi
fi
}
#------------------------------
## BIP32 SHOW ADDRESSES ONLY ##
#------------------------------
bipshowaddr ()
{
clear
echo "Press enter to see addresses."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/bip.addr | grep "Address" | less
}
#---------------------------------
## BIP32 SHOW ADDR AND PRIVKEYS ##
#---------------------------------
bipshowall ()
{
clear
echo "Press enter to see addresses and private keys."
echo "Use up/down arrows to navigate. Press "q" when finished."
read
cat btc-KeyRNG/bip.addr | less
}
#####################################
##### BLOCKCHAIN.INFO API CALLS #####
#####################################
#------------------
## CHECK UNSPENT ##
#------------------
checkunspent ()
{
clear
echo "See a list of the addresses in KeyRNG? (y/no)"
read LIST
if [ "$LIST" != "no" ]; then
    echo -e "\nPress enter to see addresses."
    echo "Use up/down arrows to navigate. Press "q" when finished."
    cat btc-KeyRNG/*.addr | grep Address | less
fi
echo -e "\nPaste address to check unspent outputs with 0 confirmations."
read ADDR
echo "Getting unspent outputs..."
if  [[ "$USE_TOR" = "y" && "$HAVE_API" = "y" ]]; then
    UNSPENT=$(curl --silent -x socks5://127.0.0.1:9050 --get https://blockchainbdgpzk.onion/q/addressbalance/"$ADDR"?api_code="$BCI_API")
    echo -e "\nAmount is in Satoshis: "$UNSPENT""
    echo -e "\nPress enter to return to BLOCKCHAIN MENU."
    read

elif [[ "$USE_TOR" = "y" && "$HAVE_API" != "y" ]]; then
    UNSPENT=$(curl --silent -x socks5://127.0.0.1:9050 --get https://blockchainbdgpzk.onion/q/addressbalance/"$ADDR")
    echo -e "\nAmount is in Satoshis: "$UNSPENT""
    echo -e "\nPress enter to return to BLOCKCHAIN MENU."
    read
elif [[ "$USE_TOR" != "y" && "$HAVE_API" = "y" ]]; then
    UNSPENT=$(curl --silent --get https://blockchain.info/q/addressbalance/"$ADDR"?api_code="$BCI_API")
    echo -e "\nAmount is in Satoshis: "$UNSPENT""
    echo -e "\nPress enter to return to BLOCKCHAIN MENU."
    read
else
    UNSPENT=$(curl --silent --get https://blockchain.info/q/addressbalance/"$ADDR")
    echo -e "\nAmount is in Satoshis: "$UNSPENT""
    echo -e "\nPress enter to return to BLOCKCHAIN MENU."
    read
fi
}
#-------------------
## RAW TX DETAILS ##
#-------------------
getrawtx ()
{
clear
echo -e "\nPaste the transaction hash."
read TXID
echo "Getting raw transaction details..."
if  [[ "$USE_TOR" = "y" && "$HAVE_API" = "y" ]]; then
    RAWTX=$(curl --silent -x socks5://127.0.0.1:9050 --get https://blockchainbdgpzk.onion/rawtx/"$TXID"?api_code="$BCI_API")
    echo -e "\nPress enter to see transaction details."
    echo "Use up/down arrows to navigate. Press "q" when finished."
    read
    echo "$RAWTX" | less
elif [[ "$USE_TOR" = "y" && "$HAVE_API" != "y" ]]; then
    UNSPENT=$(curl --silent -x socks5://127.0.0.1:9050 --get https://blockchainbdgpzk.onion/rawtx/"$TXID")
    echo -e "\nPress enter to see transaction details."
    echo "Use up/down arrows to navigate. Press "q" when finished."
    read
    echo "$RAWTX" | less
elif [[ "$USE_TOR" != "y" && "$HAVE_API" = "y" ]]; then
    UNSPENT=$(curl --silent --get https://blockchain.info/rawtx/"$TXID"?api_code="$BCI_API")
    echo -e "\nPress enter to see transaction details."
    echo "Use up/down arrows to navigate. Press "q" when finished."
    read
    echo "$RAWTX" | less
else
    UNSPENT=$(curl --silent --get https://blockchain.info/rawtx/"$TXID")
    echo -e "\nPress enter to see transaction details."
    echo "Use up/down arrows to navigate. Press "q" when finished."
    read
    echo "$RAWTX" | less
fi
}
#########################
########## END ##########
#########################
